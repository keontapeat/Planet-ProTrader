#!/usr/bin/env python3
"""
🎯 Auto-create GitHub Issues from Opus Max Analysis
"""

import os
import json
import requests
from pathlib import Path

def create_github_issues():
    """Create GitHub issues from Opus Max recommendations"""
    
    # GitHub API setup
    github_token = os.getenv('GITHUB_TOKEN')
    repo = os.getenv('GITHUB_REPOSITORY')
    
    if not github_token or not repo:
        print("❌ GitHub token or repository not found")
        return
    
    # Read Opus Max analysis
    if not Path('opus-analysis.md').exists():
        print("❌ No Opus Max analysis found")
        return
        
    with open('opus-analysis.md', 'r') as f:
        analysis = f.read()
    
    # Extract critical issues (simplified - you could make this smarter)
    lines = analysis.split('\n')
    critical_issues = []
    
    in_critical_section = False
    for line in lines:
        if '🚨 Critical Issues' in line:
            in_critical_section = True
            continue
        elif line.startswith('##') and in_critical_section:
            break
        elif in_critical_section and line.strip().startswith('-'):
            critical_issues.append(line.strip()[1:].strip())
    
    # Create issues for critical problems
    headers = {
        'Authorization': f'token {github_token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    for i, issue_text in enumerate(critical_issues[:3]):  # Max 3 issues
        issue_data = {
            'title': f'🤖 Opus Max Alert: {issue_text[:50]}...',
            'body': f"""## 🚨 Critical Issue Detected by Opus Max

**Issue**: {issue_text}

**Detected in**: Automated cloud analysis  
**Priority**: High  
**Auto-generated**: Yes

This issue was automatically detected by the Opus Max Cloud Debugger during the latest push.

### 🔧 Recommended Actions
1. Review the code mentioned in the issue
2. Apply the suggested fixes
3. Test thoroughly before merging
4. Close this issue once resolved

*Generated by Opus Max Cloud Analysis*
""",
            'labels': ['🤖 opus-max', '🚨 critical', 'automated']
        }
        
        url = f'https://api.github.com/repos/{repo}/issues'
        response = requests.post(url, headers=headers, json=issue_data)
        
        if response.status_code == 201:
            print(f"✅ Created issue: {issue_text[:50]}...")
        else:
            print(f"❌ Failed to create issue: {response.status_code}")

if __name__ == "__main__":
    create_github_issues()