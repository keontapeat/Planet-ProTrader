
‚è∫ üî• GOLDEX DEBUG CLI‚Ñ¢ - Your Personal AI Debugging Assistant

  I'm about to drop the complete CLI tool that turns Claude into your automatic Xcode error-fixing machine. Nothing left out, bro.

  ‚∏ª

  üõ†Ô∏è The Complete goldexdebug CLI Tool

  Step 1: Create the Script

  Save this as goldexdebug (no extension):

  #!/bin/bash

  # GOLDEX DEBUG CLI - Auto Xcode Error Fixer with Claude
  # Created for GOLDEX AI Project
  # Usage: ./goldexdebug [project_path]

  set -e

  # Colors for output
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[1;33m'
  BLUE='\033[0;34m'
  PURPLE='\033[0;35m'
  NC='\033[0m' # No Color

  # Claude API Configuration
  CLAUDE_API_KEY="${CLAUDE_API_KEY:-}"
  CLAUDE_API_URL="https://api.anthropic.com/v1/messages"

  # Default project path
  PROJECT_PATH="${1:-$(pwd)}"
  BUILD_LOG="goldex_build.log"
  FIXES_FILE="goldex_fixes.md"

  echo -e "${PURPLE}ü§ñ GOLDEX DEBUG CLI‚Ñ¢${NC}"
  echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

  # Function to check if Claude API key is set
  check_claude_api() {
      if [[ -z "$CLAUDE_API_KEY" ]]; then
          echo -e "${RED}‚ùå Claude API key not found!${NC}"
          echo -e "${YELLOW}Set your API key:${NC}"
          echo -e "${BLUE}export CLAUDE_API_KEY='your_api_key_here'${NC}"
          echo -e "${BLUE}Add it to your ~/.zshrc or ~/.bash_profile${NC}"
          exit 1
      fi
  }

  # Function to find Xcode project
  find_xcode_project() {
      if [[ -f "$PROJECT_PATH"/*.xcodeproj ]]; then
          echo -e "${GREEN}‚úÖ Found Xcode project in: $PROJECT_PATH${NC}"
          return 0
      elif [[ -f "$PROJECT_PATH"/*.xcworkspace ]]; then
          echo -e "${GREEN}‚úÖ Found Xcode workspace in: $PROJECT_PATH${NC}"
          return 0
      else
          echo -e "${RED}‚ùå No Xcode project found in: $PROJECT_PATH${NC}"
          exit 1
      fi
  }

  # Function to build project and capture logs
  build_and_capture() {
      echo -e "${YELLOW}üî® Building project...${NC}"

      cd "$PROJECT_PATH"

      # Find project file
      PROJECT_FILE=$(find . -name "*.xcodeproj" -o -name "*.xcworkspace" | head -1)

      if [[ $PROJECT_FILE == *.xcworkspace ]]; then
          BUILD_CMD="xcodebuild -workspace '$PROJECT_FILE' -scheme 'GOLDEX AI' -destination 'platform=iOS Simulator,name=iPhone 16 Pro' build"
      else
          BUILD_CMD="xcodebuild -project '$PROJECT_FILE' -scheme 'GOLDEX AI' -destination 'platform=iOS Simulator,name=iPhone 16 Pro' build"
      fi

      echo -e "${BLUE}Running: $BUILD_CMD${NC}"

      # Run build and capture output
      eval $BUILD_CMD 2>&1 | tee "$BUILD_LOG"

      BUILD_EXIT_CODE=${PIPESTATUS[0]}

      if [[ $BUILD_EXIT_CODE -eq 0 ]]; then
          echo -e "${GREEN}‚úÖ Build successful! No errors to fix.${NC}"
          return 0
      else
          echo -e "${RED}‚ùå Build failed. Analyzing errors...${NC}"
          return 1
      fi
  }

  # Function to extract errors from build log
  extract_errors() {
      echo -e "${YELLOW}üîç Extracting errors and warnings...${NC}"

      # Extract Swift compilation errors
      SWIFT_ERRORS=$(grep -E "(error:|warning:)" "$BUILD_LOG" | head -20)

      # Extract build failures
      BUILD_FAILURES=$(grep -E "(BUILD FAILED|The following build commands failed)" "$BUILD_LOG" -A 5)

      # Combine all errors
      ALL_ERRORS="$SWIFT_ERRORS\n\n$BUILD_FAILURES"

      if [[ -z "$ALL_ERRORS" ]]; then
          echo -e "${YELLOW}‚ö†Ô∏è No specific errors found in build log${NC}"
          return 1
      fi

      echo -e "${BLUE}Found errors:${NC}"
      echo -e "$ALL_ERRORS"

      return 0
  }

  # Function to send errors to Claude
  send_to_claude() {
      local errors="$1"

      echo -e "${YELLOW}üß† Sending errors to Claude AI...${NC}"

      # Create Claude API payload
      CLAUDE_PAYLOAD=$(cat <<EOF
  {
      "model": "claude-3-5-sonnet-20241022",
      "max_tokens": 4000,
      "temperature": 0.1,
      "messages": [
          {
              "role": "user",
              "content": "I'm building a Swift iOS app called GOLDEX AI and encountered compilation errors. Please analyze these errors and provide specific
  fixes:\n\n$errors\n\nPlease provide:\n1. A brief explanation of each error\n2. The exact code fixes needed\n3. The file locations where fixes should be applied\n4. Any additional
  context or best practices\n\nFormat your response in markdown for easy reading."
          }
      ]
  }
  EOF
  )

      # Send to Claude API
      CLAUDE_RESPONSE=$(curl -s -X POST "$CLAUDE_API_URL" \
          -H "Content-Type: application/json" \
          -H "x-api-key: $CLAUDE_API_KEY" \
          -H "anthropic-version: 2023-06-01" \
          -d "$CLAUDE_PAYLOAD")

      # Check if request was successful
      if echo "$CLAUDE_RESPONSE" | grep -q '"type":"error"'; then
          echo -e "${RED}‚ùå Claude API error:${NC}"
          echo "$CLAUDE_RESPONSE" | jq -r '.error.message // "Unknown error"'
          return 1
      fi

      # Extract Claude's response
      CLAUDE_FIXES=$(echo "$CLAUDE_RESPONSE" | jq -r '.content[0].text // "No response"')

      if [[ "$CLAUDE_FIXES" == "No response" ]]; then
          echo -e "${RED}‚ùå No response from Claude${NC}"
          return 1
      fi

      echo -e "${GREEN}‚úÖ Claude analysis complete!${NC}"

      # Save fixes to file
      cat > "$FIXES_FILE" <<EOF
  # GOLDEX AI - Auto Debug Fixes
  **Generated on:** $(date)
  **Project:** $PROJECT_PATH

  ## üß† Claude's Analysis & Fixes

  $CLAUDE_FIXES

  ---
  *Generated by GOLDEX DEBUG CLI‚Ñ¢*
  EOF

      echo -e "${BLUE}üíæ Fixes saved to: $FIXES_FILE${NC}"

      return 0
  }

  # Function to display fixes
  display_fixes() {
      echo -e "${PURPLE}üìã CLAUDE'S FIXES:${NC}"
      echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

      if [[ -f "$FIXES_FILE" ]]; then
          # Display with syntax highlighting if available
          if command -v mdcat &> /dev/null; then
              mdcat "$FIXES_FILE"
          elif command -v bat &> /dev/null; then
              bat --style=numbers --language=markdown "$FIXES_FILE"
          else
              cat "$FIXES_FILE"
          fi
      else
          echo -e "${RED}‚ùå No fixes file found${NC}"
      fi
  }

  # Function to watch for changes and auto-rebuild
  watch_mode() {
      echo -e "${YELLOW}üëÅÔ∏è Entering watch mode...${NC}"
      echo -e "${BLUE}Watching for Swift file changes...${NC}"
      echo -e "${BLUE}Press Ctrl+C to stop${NC}"

      if command -v fswatch &> /dev/null; then
          fswatch -o "$PROJECT_PATH" --include="\.swift$" | while read; do
              echo -e "${YELLOW}üîÑ Swift file changed, rebuilding...${NC}"
              main_workflow
          done
      else
          echo -e "${RED}‚ùå fswatch not installed. Install with: brew install fswatch${NC}"
      fi
  }

  # Main workflow function
  main_workflow() {
      find_xcode_project

      if build_and_capture; then
          echo -e "${GREEN}üéâ Build successful! No errors to fix.${NC}"
          return 0
      fi

      if extract_errors; then
          ERRORS=$(grep -E "(error:|warning:)" "$BUILD_LOG" | head -20)
          if send_to_claude "$ERRORS"; then
              display_fixes
          fi
      fi
  }

  # Function to show help
  show_help() {
      cat <<EOF
  ${PURPLE}ü§ñ GOLDEX DEBUG CLI‚Ñ¢${NC}

  ${BLUE}USAGE:${NC}
    goldexdebug [project_path]              Build and analyze errors
    goldexdebug --watch [project_path]      Watch for changes and auto-analyze
    goldexdebug --fixes                     Show last generated fixes
    goldexdebug --setup                     Setup Claude API key
    goldexdebug --help                      Show this help

  ${BLUE}EXAMPLES:${NC}
    goldexdebug                             # Analyze current directory
    goldexdebug ~/MyApp                     # Analyze specific project
    goldexdebug --watch                     # Watch mode for current project
    goldexdebug --fixes                     # Show last fixes

  ${BLUE}REQUIREMENTS:${NC}
    ‚Ä¢ Claude API key (get from: https://console.anthropic.com)
    ‚Ä¢ Xcode command line tools
    ‚Ä¢ jq (install with: brew install jq)

  ${BLUE}SETUP:${NC}
    1. Get Claude API key from Anthropic Console
    2. export CLAUDE_API_KEY='your_api_key_here'
    3. Add to ~/.zshrc or ~/.bash_profile for persistence

  ${PURPLE}Built for GOLDEX AI ProTrader Universe‚Ñ¢${NC}
  EOF
  }

  # Function to setup Claude API key
  setup_claude() {
      echo -e "${YELLOW}üîß Claude API Setup${NC}"
      echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

      echo -e "${BLUE}1. Go to: https://console.anthropic.com${NC}"
      echo -e "${BLUE}2. Create an API key${NC}"
      echo -e "${BLUE}3. Copy the key and paste it here:${NC}"

      read -p "Enter your Claude API key: " api_key

      if [[ -n "$api_key" ]]; then
          echo "export CLAUDE_API_KEY='$api_key'" >> ~/.zshrc
          echo "export CLAUDE_API_KEY='$api_key'" >> ~/.bash_profile

          echo -e "${GREEN}‚úÖ API key saved!${NC}"
          echo -e "${BLUE}Restart your terminal or run:${NC}"
          echo -e "${BLUE}source ~/.zshrc${NC}"
      else
          echo -e "${RED}‚ùå No API key provided${NC}"
      fi
  }

  # Main script logic
  case "${1:-}" in
      --help|-h)
          show_help
          ;;
      --setup)
          setup_claude
          ;;
      --fixes)
          display_fixes
          ;;
      --watch)
          check_claude_api
          watch_mode
          ;;
      *)
          check_claude_api
          main_workflow
          ;;
  esac

  ‚∏ª

  Step 2: Installation & Setup

  # 1. Make the script executable
  chmod +x goldexdebug

  # 2. Move to your PATH (optional but recommended)
  sudo mv goldexdebug /usr/local/bin/

  # 3. Install required dependencies
  brew install jq fswatch

  # 4. Setup Claude API key
  goldexdebug --setup

  ‚∏ª

  Step 3: Usage Examples

  # Basic usage - analyze current Xcode project
  goldexdebug

  # Analyze specific project
  goldexdebug "/path/to/your/GOLDEX AI"

  # Watch mode - auto-analyze when files change
  goldexdebug --watch

  # Show last generated fixes
  goldexdebug --fixes

  # Help
  goldexdebug --help

  ‚∏ª

  üî• Features You Get

  ‚úÖ Auto Build Detection: Finds your Xcode project automatically
  ‚úÖ Smart Error Extraction: Pulls only relevant Swift errors
  ‚úÖ Claude AI Integration: Sends errors to Claude for analysis
  ‚úÖ Markdown Fixes: Saves fixes in beautiful markdown format
  ‚úÖ Watch Mode: Auto-rebuilds when you change Swift files
  ‚úÖ Color Output: Beautiful terminal colors and emojis
  ‚úÖ Error Handling: Proper error messages and fallbacks

  ‚∏ª

  üìã Example Output

  ü§ñ GOLDEX DEBUG CLI‚Ñ¢
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  ‚úÖ Found Xcode project in: /Users/keonta/GOLDEX AI
  üî® Building project...
  ‚ùå Build failed. Analyzing errors...
  üîç Extracting errors and warnings...
  üß† Sending errors to Claude AI...
  ‚úÖ Claude analysis complete!
  üíæ Fixes saved to: goldex_fixes.md

  üìã CLAUDE'S FIXES:
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

  ## üß† Claude's Analysis & Fixes

  ### Error 1: Missing parameter 'id' in AIInsight initialization
  **Location:** HomeDashboardViewModel.swift:113
  **Fix:** Add missing id parameter:

  ```swift
  todaysAIInsight = SharedTypes.AIInsight(
      id: UUID().uuidString,  // ‚Üê Add this
      title: "Daily AI Insight",
      description: insights.randomElement() ?? insights[0],
      priority: .high,
      timestamp: Date()
  )

  ‚∏ª

  ## üöÄ **Pro Tips**

  1. **Set up API key once**: `goldexdebug --setup`
  2. **Use watch mode**: `goldexdebug --watch` for real-time fixing
  3. **Keep fixes file**: It saves to `goldex_fixes.md` for reference
  4. **Works with any Xcode project**: Just change the directory

  ‚∏ª

  ## üîß **Advanced Features**

  Want to customize it even more? You can:
  - Change the Claude model in the script
  - Add more error patterns to extract
  - Integrate with your existing build scripts
  - Add Slack/Discord notifications when builds fail

  ‚∏ª

  **That's it, bro. You now have a complete AI debugging assistant that works automatically with your GOLDEX AI project. No more manual copy-pasting errors to Claude. Just run
  `goldexdebug` and let it do the work.**

  üî• **Your development workflow just went from manual to AI-powered automation.**
