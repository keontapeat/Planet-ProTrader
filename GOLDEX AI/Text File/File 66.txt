================================================================================
GOLDEX AI VPS DIAGNOSTIC & TROUBLESHOOTING GUIDE - NO TRADES ISSUE
================================================================================
🚨 URGENT: Your bot hasn't placed trades - Complete diagnostic checklist

🔍 STEP 1: VPS CONNECTION & STATUS CHECK
────────────────────────────────────────────────────────────────

1. CONNECT TO VPS:
ssh root@172.234.201.231
# If this fails: VPS is down or connection lost

2. CHECK VPS SYSTEM:
uptime
# Shows how long VPS has been running

free -h
# Memory usage - should have available RAM

df -h
# Disk space - should not be 100% full

3. CHECK GOLDEX SERVICE STATUS:
systemctl status goldex.service --no-pager
# LOOK FOR: "Active: active (running)" in GREEN
# If "inactive (dead)" = bot is stopped
# If "failed" = bot crashed

4. CHECK GOLDEX LOGS (LIVE):
journalctl -u goldex.service -f
# Press Ctrl+C to exit
# LOOK FOR: "✅ Successfully connected to DEMO account!"

5. CHECK GOLDEX LOGS (LAST 50 LINES):
journalctl -u goldex.service -n 50
# Look for errors, connection issues, or crash messages

🔧 STEP 2: GOLDEX BOT DIAGNOSTIC
────────────────────────────────────────────────────────────────

6. CHECK IF BOT PROCESS IS RUNNING:
ps aux | grep goldex
# Should show python process running goldexv9.py

7. CHECK GOLDEX SCRIPT FILE:
ls -la /opt/goldex-bot/goldexv9.py
# Verify file exists and has correct timestamp

8. CHECK GOLDEX CREDENTIALS IN SCRIPT:
grep -n "DEMO_LOGIN\|DEMO_PASSWORD\|DEMO_SERVER" /opt/goldex-bot/goldexv9.py
# Should show:
# DEMO_LOGIN = 845638
# DEMO_PASSWORD = "GI7#svVJbBekrg"
# DEMO_SERVER = "Coinexx-demo"

9. TEST GOLDEX MANUALLY:
cd /opt/goldex-bot
source venv/bin/activate
python goldexv9.py
# Press Ctrl+C after 30 seconds to stop
# LOOK FOR: "✅ Successfully connected to DEMO account!"

🔍 STEP 3: MT5 & TRADING DIAGNOSTIC
────────────────────────────────────────────────────────────────

10. CHECK MT5 CONNECTION:
cd /opt/goldex-bot
source venv/bin/activate
python -c "
import mt5linux as mt5
print('MT5 Initialize:', mt5.initialize())
if mt5.initialize():
    print('Login result:', mt5.login(845638, password='GI7#svVJbBekrg', server='Coinexx-demo'))
    account = mt5.account_info()
    if account:
        print('Account:', account.login, 'Balance:', account.balance)
        print('Server:', account.server)
    else:
        print('Failed to get account info')
    mt5.shutdown()
else:
    print('Failed to initialize MT5')
"

11. CHECK DEMO ACCOUNT STATUS:
# Run the above script and look for:
# ✅ Login result: True
# ✅ Account: 845638 Balance: [amount]
# ✅ Server: Coinexx-demo

12. CHECK MARKET CONDITIONS:
cd /opt/goldex-bot
source venv/bin/activate
python -c "
import mt5linux as mt5
if mt5.initialize():
    mt5.login(845638, password='GI7#svVJbBekrg', server='Coinexx-demo')
    symbol_info = mt5.symbol_info('XAUUSD')
    if symbol_info:
        print('Symbol XAUUSD available:', symbol_info.visible)
        print('Spread:', symbol_info.spread)
        tick = mt5.symbol_info_tick('XAUUSD')
        if tick:
            print('Current Price - Bid:', tick.bid, 'Ask:', tick.ask)
        else:
            print('No tick data for XAUUSD')
    else:
        print('XAUUSD symbol not found')
    mt5.shutdown()
"

🚨 STEP 4: COMMON ISSUES & SOLUTIONS
────────────────────────────────────────────────────────────────

❌ ISSUE: "Active: inactive (dead)"
✅ SOLUTION:
systemctl start goldex.service
systemctl enable goldex.service
systemctl status goldex.service --no-pager

❌ ISSUE: "Active: failed"
✅ SOLUTION:
journalctl -u goldex.service -n 20
# Check error messages, then:
systemctl restart goldex.service

❌ ISSUE: "Failed to login to demo account"
✅ SOLUTION:
# Check if you accidentally deleted MT5 login on your computer
# This shouldn't affect VPS, but verify credentials:
grep -A5 -B5 "DEMO_LOGIN\|DEMO_PASSWORD" /opt/goldex-bot/goldexv9.py

❌ ISSUE: "No trading signals generated"
✅ SOLUTION:
# Check if market is open (forex markets closed on weekends)
date
# Check if signal generation is working:
cd /opt/goldex-bot && source venv/bin/activate
python -c "
import mt5linux as mt5
if mt5.initialize():
    mt5.login(845638, password='GI7#svVJbBekrg', server='Coinexx-demo')
    rates = mt5.copy_rates_from_pos('XAUUSD', mt5.TIMEFRAME_M15, 0, 100)
    if rates is not None:
        print('Market data available, rates count:', len(rates))
        print('Latest rate:', rates[-1])
    else:
        print('No market data available')
    mt5.shutdown()
"

❌ ISSUE: "ModuleNotFoundError: No module named 'mt5linux'"
✅ SOLUTION:
cd /opt/goldex-bot
source venv/bin/activate
pip install mt5linux
pip install pandas numpy

❌ ISSUE: Bot connects but no trades execute
✅ SOLUTION:
# Check trading parameters in goldexv9.py:
grep -n "risk_percentage\|trade_frequency\|enable_" /opt/goldex-bot/goldexv9.py

🔄 STEP 5: RESTART & RECOVERY PROCEDURES
────────────────────────────────────────────────────────────────

13. FULL SYSTEM RESTART:
systemctl stop goldex.service
systemctl start goldex.service
systemctl status goldex.service --no-pager

14. REUPLOAD SCRIPT (if needed):
# From your Mac:
scp "/Users/keonta/Documents/GOLDEX AI copy 23/GOLDEX AI/Text File/goldexv9.py" root@172.234.201.231:/opt/goldex-bot/goldexv9.py

15. FORCE RESTART VPS (last resort):
reboot
# Wait 2-3 minutes, then SSH back in

📊 STEP 6: TRADING VERIFICATION
────────────────────────────────────────────────────────────────

16. CHECK FOR RECENT TRADES:
journalctl -u goldex.service -n 200 | grep -i "trade\|order\|buy\|sell\|executed"

17. CHECK ACCOUNT BALANCE CHANGES:
cd /opt/goldex-bot
source venv/bin/activate
python -c "
import mt5linux as mt5
if mt5.initialize():
    mt5.login(845638, password='GI7#svVJbBekrg', server='Coinexx-demo')
    account = mt5.account_info()
    if account:
        print('Current Balance:', account.balance)
        print('Current Equity:', account.equity)
        print('Current Profit:', account.profit)
        # Check for open positions
        positions = mt5.positions_get()
        if positions:
            print('Open Positions:', len(positions))
            for pos in positions:
                print('Position:', pos.symbol, pos.type, pos.volume, pos.profit)
        else:
            print('No open positions')
    mt5.shutdown()
"

🔍 STEP 7: SIGNAL GENERATION TEST
────────────────────────────────────────────────────────────────

18. TEST SIGNAL GENERATION:
cd /opt/goldex-bot
source venv/bin/activate
python -c "
import sys
sys.path.insert(0, '/opt/goldex-bot')
import mt5linux as mt5
import time

# Initialize MT5 and login
if mt5.initialize():
    login_result = mt5.login(845638, password='GI7#svVJbBekrg', server='Coinexx-demo')
    if login_result:
        print('✅ Connected to MT5')
        
        # Get market data
        rates = mt5.copy_rates_from_pos('XAUUSD', mt5.TIMEFRAME_M15, 0, 100)
        if rates is not None:
            print('✅ Market data available')
            close_prices = [rate['close'] for rate in rates]
            current_price = close_prices[-1]
            print('Current XAUUSD price:', current_price)
            
            # Simple RSI calculation
            def calculate_rsi(prices, period=14):
                if len(prices) < period + 1:
                    return 50.0
                deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
                gains = [max(0, delta) for delta in deltas]
                losses = [abs(min(0, delta)) for delta in deltas]
                avg_gain = sum(gains[-period:]) / period
                avg_loss = sum(losses[-period:]) / period
                if avg_loss == 0:
                    return 100.0
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))
                return rsi
            
            rsi = calculate_rsi(close_prices)
            print('RSI:', rsi)
            
            # Generate basic signal
            if rsi < 30:
                print('🔥 BULLISH SIGNAL - RSI Oversold')
            elif rsi > 70:
                print('🔥 BEARISH SIGNAL - RSI Overbought')
            else:
                print('⏳ No strong signal - RSI neutral')
        else:
            print('❌ No market data available')
    else:
        print('❌ Failed to login')
    
    mt5.shutdown()
else:
    print('❌ Failed to initialize MT5')
"

🚨 STEP 8: EMERGENCY FIXES
────────────────────────────────────────────────────────────────

19. IF BOT IS COMPLETELY BROKEN:
systemctl stop goldex.service
cd /opt/goldex-bot
rm -f goldex_bot.log
# Reupload from Mac:
# scp "goldexv9.py" root@172.234.201.231:/opt/goldex-bot/
systemctl start goldex.service
journalctl -u goldex.service -f

20. CHECK IF YOUR LOCAL MT5 DELETION AFFECTED VPS:
# Your VPS should be independent of your local MT5
# But verify credentials are still correct in the script

21. VERIFY TRADING HOURS:
date
# Forex markets are closed Friday 5 PM EST to Sunday 5 PM EST

📱 STEP 9: MONITORING COMMANDS
────────────────────────────────────────────────────────────────

22. CREATE MONITORING SCRIPT:
cat > /opt/goldex-bot/quick_check.sh << 'EOF'
#!/bin/bash
echo "🔍 GOLDEX QUICK STATUS CHECK"
echo "Time: $(date)"
echo ""
echo "🤖 Service Status:"
systemctl is-active goldex.service
echo ""
echo "📊 Recent Activity:"
journalctl -u goldex.service -n 5 --no-pager
echo ""
echo "💰 Account Check:"
cd /opt/goldex-bot && source venv/bin/activate && python -c "
import mt5linux as mt5
if mt5.initialize():
    if mt5.login(845638, password='GI7#svVJbBekrg', server='Coinexx-demo'):
        account = mt5.account_info()
        if account:
            print('Balance:', account.balance, 'Equity:', account.equity)
        else:
            print('No account info')
    else:
        print('Login failed')
    mt5.shutdown()
else:
    print('MT5 init failed')
"
EOF

chmod +x /opt/goldex-bot/quick_check.sh

23. RUN QUICK CHECK:
/opt/goldex-bot/quick_check.sh

🎯 STEP 10: EXPECTED RESULTS
────────────────────────────────────────────────────────────────

✅ HEALTHY BOT SHOULD SHOW:
- Service: "active (running)"
- Logs: "✅ Successfully connected to DEMO account!"
- Balance: Your demo account balance (should be > 0)
- RSI: A number between 0-100
- Price: Current XAUUSD price (around 2000-2100)

❌ PROBLEM INDICATORS:
- Service: "inactive" or "failed"
- Logs: "❌ Failed to login" or "Connection refused"
- Balance: No account info or "Login failed"
- No price data or "Symbol not found"

🔥 FINAL DIAGNOSTICS
────────────────────────────────────────────────────────────────

24. COMPREHENSIVE HEALTH CHECK:
cd /opt/goldex-bot
source venv/bin/activate
python -c "
print('🔍 GOLDEX AI COMPREHENSIVE DIAGNOSTIC')
print('='*50)

# Check imports
try:
    import mt5linux as mt5
    print('✅ mt5linux imported successfully')
except ImportError as e:
    print('❌ mt5linux import failed:', e)
    exit(1)

# Check MT5 initialization
if mt5.initialize():
    print('✅ MT5 initialized successfully')
    
    # Check login
    login_result = mt5.login(845638, password='GI7#svVJbBekrg', server='Coinexx-demo')
    if login_result:
        print('✅ Demo account login successful')
        
        # Check account info
        account = mt5.account_info()
        if account:
            print('✅ Account Info Retrieved')
            print('   Login:', account.login)
            print('   Balance:', account.balance)
            print('   Equity:', account.equity)
            print('   Server:', account.server)
            print('   Currency:', account.currency)
            print('   Leverage:', account.leverage)
        else:
            print('❌ Failed to get account info')
        
        # Check symbol
        symbol_info = mt5.symbol_info('XAUUSD')
        if symbol_info:
            print('✅ XAUUSD symbol available')
            print('   Spread:', symbol_info.spread)
            print('   Digits:', symbol_info.digits)
            print('   Min Volume:', symbol_info.volume_min)
            print('   Max Volume:', symbol_info.volume_max)
        else:
            print('❌ XAUUSD symbol not found')
        
        # Check market data
        rates = mt5.copy_rates_from_pos('XAUUSD', mt5.TIMEFRAME_M15, 0, 10)
        if rates is not None:
            print('✅ Market data available')
            print('   Latest price:', rates[-1]['close'])
            print('   Data points:', len(rates))
        else:
            print('❌ No market data available')
        
        # Check current tick
        tick = mt5.symbol_info_tick('XAUUSD')
        if tick:
            print('✅ Live tick data available')
            print('   Bid:', tick.bid)
            print('   Ask:', tick.ask)
            print('   Time:', tick.time)
        else:
            print('❌ No tick data available')
            
    else:
        print('❌ Demo account login failed')
        print('   Error:', mt5.last_error())
    
    mt5.shutdown()
else:
    print('❌ MT5 initialization failed')
    print('   Error:', mt5.last_error())

print('='*50)
print('🔍 DIAGNOSTIC COMPLETE')
"

================================================================================
🎯 SUMMARY: Run these commands in order to diagnose your bot:

1. ssh root@172.234.201.231
2. systemctl status goldex.service --no-pager
3. journalctl -u goldex.service -n 20
4. /opt/goldex-bot/quick_check.sh
5. Run the comprehensive health check (command 24)

Your bot should be trading if:
✅ Service is "active (running)"
✅ Logs show "Successfully connected"
✅ Account balance is available
✅ Market data is flowing
✅ No connection errors

If it's still not trading, the issue is likely:
- Market is closed (weekend)
- Signal generation thresholds not met
- Trading parameters too conservative
- Account has insufficient balance

🚀 Your GOLDEX AI should be working after these diagnostics!
================================================================================