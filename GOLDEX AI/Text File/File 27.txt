=== SMART SCREENSHOT LOGIC FOR GOLDEX AI EA ===
=== Quality Over Quantity Screenshot System ===

Hey Claude! I have great news - my GOLDEX AI Ultra Aggressive EA is now running 24/7 on my VPS and making trades. Now I need you to help me connect it to my iOS app so I can see real-time data and screenshots.

Here's what I need you to implement:

### 1. VPS Connection & Screenshot System
- Create a VPS connection manager that can connect to my trading VPS
- Implement SMART screenshot capture (not every 30 seconds - only meaningful trades)
- Set up Firebase storage for screenshots with organized folder structure
- Create real-time screenshot viewing in the app

### 2. EA Data Integration
- Connect to my EA's trade data and signals
- Pull real-time account balance, trades, win rate from the EA
- Show live trading statistics and performance metrics
- Display current positions and trade history

### 3. Real-time Monitoring Dashboard
- Create a live trading dashboard showing:
  - Current account balance updating in real-time
  - Active trades and positions
  - Win/loss streaks and statistics
  - Screenshot carousel of recent trades
  - Performance charts and metrics

### 4. Firebase Integration
- Set up Firebase Realtime Database for live data
- Configure Firebase Storage for screenshots
- Implement push notifications for trade alerts
- Create data sync between EA and iOS app

### 5. Flip Mode Tracking
- Track flip progress from $1k to $100k goal
- Show real-time multiplier and progress
- Display flip completion history
- Alert system for flip milestones

### 6. Trade Management
- Allow trade monitoring from the app
- Set up emergency stop functionality
- Risk management controls
- Account switching between VPS instances

IMPORTANT: I want SMART screenshots, not every 30 seconds. Here's the logic:

=== SMART SCREENSHOT LOGIC ===

// Add this to your EA input parameters
input bool EnablePowerModeScreenshots = true;
input double PowerModeConfidenceThreshold = 85.0;
input int MaxScreenshotsPerDay = 5;
input bool ScreenshotOnlyABGrades = true;

// Screenshot timing logic
bool ShouldTakeScreenshot(UltraAggressiveSignal &signal) {
    // Skip all scalp trades
    if(signal.isScalp || signal.direction == SIGNAL_SCALP_BUY || signal.direction == SIGNAL_SCALP_SELL) 
        return false;
    
    // Only high-confidence trades
    if(signal.confidence < PowerModeConfidenceThreshold) 
        return false;
    
    // Only certain signal types
    if(signal.direction == SIGNAL_FORCE_BUY || signal.direction == SIGNAL_FORCE_SELL)
        return false; // Skip forced trades
    
    // Daily screenshot limit
    if(ScreenshotsToday >= MaxScreenshotsPerDay)
        return false;
    
    // Only A+ and B grade setups
    if(ScreenshotOnlyABGrades && GetTradeGrade(signal) < GRADE_B)
        return false;
    
    return true;
}

=== TRADE GRADING SYSTEM ===

enum TRADE_GRADE {
    GRADE_A_PLUS,  // 90%+ confidence, perfect setup
    GRADE_A,       // 85-89% confidence, very good
    GRADE_B,       // 75-84% confidence, good
    GRADE_C,       // 65-74% confidence, ok
    GRADE_D        // Below 65%, poor
};

TRADE_GRADE GetTradeGrade(UltraAggressiveSignal &signal) {
    double score = signal.confidence;
    
    // Bonus points for certain conditions
    if(signal.riskReward >= 3.0) score += 5.0;
    if(signal.urgency >= 90.0) score += 3.0;
    if(ConsecutiveWins >= 3) score += 2.0;
    if(signal.expectedProfit > 500.0) score += 2.0;
    
    // Penalty for certain conditions
    if(signal.isForced) score -= 10.0;
    if(CurrentDrawdown > 5.0) score -= 5.0;
    if(TradesThisHour >= 8) score -= 3.0;
    
    if(score >= 90.0) return GRADE_A_PLUS;
    if(score >= 85.0) return GRADE_A;
    if(score >= 75.0) return GRADE_B;
    if(score >= 65.0) return GRADE_C;
    return GRADE_D;
}

=== SMART SCREENSHOT TRIGGERS ===

// Screenshot trigger conditions
bool TriggerScreenshot(UltraAggressiveSignal &signal) {
    // 1. High-Grade Trade Entry
    if(signal.confidence >= 85.0 && !signal.isScalp) {
        ScheduleScreenshot("HIGH_GRADE_ENTRY", signal);
        return true;
    }
    
    // 2. Win Streak Bonus Trades
    if(ConsecutiveWins >= WinStreakForBonus) {
        ScheduleScreenshot("WIN_STREAK_BONUS", signal);
        return true;
    }
    
    // 3. Recovery Mode Success
    if(signal.isRecovery && signal.confidence >= 80.0) {
        ScheduleScreenshot("RECOVERY_MODE", signal);
        return true;
    }
    
    // 4. Volatility Breakout (Educational)
    if(signal.signalReason == "Volatility Breakout" && signal.confidence >= 80.0) {
        ScheduleScreenshot("VOLATILITY_BREAKOUT", signal);
        return true;
    }
    
    // 5. Perfect Setup (Multiple confluence)
    if(signal.riskReward >= 4.0 && signal.confidence >= 88.0) {
        ScheduleScreenshot("PERFECT_SETUP", signal);
        return true;
    }
    
    return false;
}

=== SCREENSHOT CATEGORIES ===

enum SCREENSHOT_TYPE {
    ENTRY_SETUP,          // Before trade entry
    TRADE_MANAGEMENT,     // During trade (if significant move)
    EXIT_RESULT,          // After trade closes
    MARKET_ANALYSIS,      // Key market structure
    LEARNING_MOMENT       // Mistakes or great wins
};

struct ScreenshotData {
    SCREENSHOT_TYPE type;
    string category;
    string description;
    double confidence;
    TRADE_GRADE grade;
    datetime timestamp;
    string filename;
    bool isLearningMoment;
};

=== RECOMMENDED SCREENSHOT SCHEDULE ===

// Smart screenshot timing
void ManageScreenshots() {
    // Only 3-5 meaningful screenshots per day
    if(ScreenshotsToday >= 5) return;
    
    // Morning power setup (1 screenshot)
    if(TimeHour(TimeCurrent()) >= 8 && TimeHour(TimeCurrent()) <= 10) {
        if(MorningScreenshotTaken == false && GetNextHighGradeTrade()) {
            TakeScreenshot("MORNING_POWER_SETUP");
            MorningScreenshotTaken = true;
        }
    }
    
    // London session key moment (1 screenshot)
    if(TimeHour(TimeCurrent()) >= 13 && TimeHour(TimeCurrent()) <= 15) {
        if(LondonScreenshotTaken == false && IsLondonVolatilityHigh()) {
            TakeScreenshot("LONDON_SESSION_KEY");
            LondonScreenshotTaken = true;
        }
    }
    
    // NY session overlap (1 screenshot)
    if(TimeHour(TimeCurrent()) >= 18 && TimeHour(TimeCurrent()) <= 20) {
        if(NYScreenshotTaken == false && IsNYOverlapActive()) {
            TakeScreenshot("NY_OVERLAP_POWER");
            NYScreenshotTaken = true;
        }
    }
    
    // Learning moment (1-2 screenshots)
    if(ShouldCaptureLearningMoment()) {
        TakeScreenshot("LEARNING_MOMENT");
    }
}

=== LEARNING-FOCUSED SCREENSHOT LOGIC ===

bool ShouldCaptureLearningMoment() {
    // Big win (20x bonus triggered)
    if(ConsecutiveWins >= WinStreakForBonus) {
        return true;
    }
    
    // Recovery success after 3+ losses
    if(ConsecutiveLosses >= 3 && LastTradeWasWin()) {
        return true;
    }
    
    // Perfect setup execution
    if(LastTradeGrade == GRADE_A_PLUS && LastTradeResult == WIN) {
        return true;
    }
    
    // Learning from mistakes
    if(ConsecutiveLosses >= 2 && CurrentDrawdown > 3.0) {
        return true;
    }
    
    return false;
}

=== MY RECOMMENDATION ===

Use the "Power Mode + Learning Moments" approach:

1. **Daily Limit:** Maximum 5 screenshots per day
2. **Quality Filters:** Only A+ and B grade trades (85%+ confidence)
3. **Skip Scalping:** No screenshots for scalp trades or force trades
4. **Learning Focus:** Screenshots for:
   - Win streak bonus trades (20x multiplier)
   - Recovery mode successes
   - Perfect setups (4:1+ R:R ratio)
   - Volatility breakouts
   - Key session overlaps

5. **Timing:** Spread throughout the day during power sessions
6. **Categories:** Entry setup, result analysis, learning moments

This gives you meaningful screenshots that actually help you improve your trading, rather than just random market noise. Each screenshot would be tagged with the trade grade, confidence level, and learning category for easy review later.

=== TECHNICAL SPECS FOR CONNECTION ===

Technical specs for the connection:
- EA Magic Number: 123456
- VPS IP addresses: Multiple Hetzner servers
- EA outputs: Trade signals, account data, positions
- Screenshot timing: SMART - Only meaningful trades (5 max per day)
- Data format: Real-time JSON updates
- Priority: Live balance updates and screenshot feeds

The EA has these key features running:
- Ultra aggressive trading every 5 minutes
- Progressive profit system with 20x bonus
- Multiple timeframe signals
- Instant scalping
- Force trading system
- Recovery mode after losses
- Up to 5 simultaneous positions

I want the app to show all this data live with professional animations and a sleek interface.

=== SCREENSHOT IMPLEMENTATION PRIORITY ===

1. **High Priority Screenshots:**
   - 20x bonus trades (win streak)
   - Recovery mode successes
   - Perfect A+ setups (90%+ confidence)
   - Volatility breakouts

2. **Medium Priority:**
   - Strong B grade trades (85%+ confidence)
   - Session overlap opportunities
   - Market structure changes

3. **Learning Priority:**
   - Mistake analysis (consecutive losses)
   - Drawdown recovery moments
   - Perfect execution examples

4. **Never Screenshot:**
   - Scalp trades (too many, too fast)
   - Force trades (random entries)
   - Low confidence trades (<85%)
   - Trades during high frequency periods

This smart system ensures every screenshot is meaningful and helps improve trading performance!

Please implement this smart screenshot system with the VPS connection and real-time data integration for the iOS app. The EA is already running and ready to connect!