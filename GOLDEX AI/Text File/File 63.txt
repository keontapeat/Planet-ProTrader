#!/usr/bin/env python3
"""
GOLDEX AI Ultra Aggressive Trading Bot V10 - Real Demo Account Setup
Compatible with Linode VPS and mt5linux installation
"""

import sys
import time
import datetime
import logging
from typing import Dict, List, Optional
import os

# Uncomment for Supabase integration if needed
# from supabase import create_client
# SUPA_URL = os.getenv("SUPA_URL")
# SUPA_KEY = os.getenv("SUPA_KEY")
# supabase = create_client(SUPA_URL, SUPA_KEY)

# Try to import mt5linux
try:
    import mt5linux as mt5
    print("‚úì Successfully imported mt5linux")
    MT5_AVAILABLE = True
except ImportError:
    print("‚ùå mt5linux not found. Please install: pip install mt5linux")
    MT5_AVAILABLE = False
    sys.exit(1)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('goldex_bot_v10.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class GoldexBotV10:
    def __init__(self):
        self.symbol = "XAUUSD"
        self.risk_percentage = 15.0
        self.trade_frequency_seconds = 60
        self.enable_martingale = True
        self.martingale_multiplier = 2.0
        self.enable_progressive_risk = True
        self.max_risk_percentage = 25.0
        self.enable_notifications = True
        # V10 options
        self.enable_turbo_mode = True
        self.enable_volume_booster = True
        self.volume_multiplier = 2.0
        self.enable_rapid_growth = True
        self.max_simultaneous_positions = 10
        self.enable_flip_mode = True

        # Trading stats
        self.total_trades = 0
        self.winning_trades = 0
        self.consecutive_wins = 0
        self.consecutive_losses = 0
        self.max_drawdown = 0.0
        self.initial_balance = 0.0
        self.current_multiplier = 1.0

        # Market state
        self.market_state = {
            'in_uptrend': False,
            'in_downtrend': False,
            'in_range': False,
            'volatility': 0.0,
            'momentum': 0.0,
            'strength': 0.0,
            'opportunity': 0.0
        }

        self.last_trade_time = 0
        self.is_connected = False

        # Demo account credentials (set via method or at main)
        self.demo_login = None
        self.demo_password = None
        self.demo_server = None

    def set_demo_credentials(self, login: int, password: str, server: str):
        """Set demo account credentials"""
        self.demo_login = login
        self.demo_password = password
        self.demo_server = server
        logger.info(f"Demo credentials set for account: {login}")

    def connect_mt5(self):
        """Connect to MT5 terminal with demo account"""
        if not MT5_AVAILABLE:
            logger.error("mt5linux not available. Cannot connect to real account.")
            return False

        if not mt5.initialize():
            logger.error(f"Failed to initialize MT5: {mt5.last_error()}")
            return False

        logger.info("‚úì MT5 initialized successfully")

        if not all([self.demo_login, self.demo_password, self.demo_server]):
            logger.error("‚ùå Demo account credentials not provided!")
            logger.error("Please set credentials using: bot.set_demo_credentials(login, password, server)")
            return False

        if not mt5.login(self.demo_login, password=self.demo_password, server=self.demo_server):
            logger.error(f"‚ùå Failed to login to demo account: {mt5.last_error()}")
            return False

        account_info = mt5.account_info()
        if account_info is None:
            logger.error("‚ùå Failed to get account info")
            return False

        self.initial_balance = account_info.balance
        self.is_connected = True

        logger.info(f"‚úÖ Successfully connected to DEMO account!")
        logger.info(f"üìä Account: {account_info.login}")
        logger.info(f"üè¶ Server: {account_info.server}")
        logger.info(f"üí∞ Balance: ${account_info.balance:.2f}")
        logger.info(f"üìà Equity: ${account_info.equity:.2f}")
        logger.info(f"üè∑Ô∏è  Currency: {account_info.currency}")
        logger.info(f"üéØ Leverage: 1:{account_info.leverage}")

        symbol_info = mt5.symbol_info(self.symbol)
        if symbol_info is None:
            logger.error(f"‚ùå Symbol {self.symbol} not found!")
            return False

        logger.info(f"‚úÖ Symbol {self.symbol} verified - Spread: {symbol_info.spread}")

        return True

    # --- Market methods same as previous version (left out for brevity but can be copy-paste) ---

    # The get_symbol_info, get_current_price, get_rates,
    # calculate_rsi, calculate_moving_average, calculate_atr,
    # analyze_market, generate_signal, calculate_lot_size,
    # execute_trade, get_account_stats, print_status methods
    # should be copied from your V9 version for full logic.
    # For brevity, refer to your pasted V9 code block.

    # --- (Paste complete market/trading logic from V9 here) ---

    def run(self):
        """Main trading loop"""
        logger.info("üöÄ Starting GOLDEX V10 - Demo Trading Mode")

        if not self.connect_mt5():
            logger.error("‚ùå Failed to connect to MT5. Exiting...")
            return

        try:
            while True:
                current_time = time.time()
                # Turbo Mode (runs every 5 seconds if enabled)
                if self.enable_turbo_mode and (current_time - self.last_trade_time >= 5):
                    # --- Place turbo signal gen/trading logic here ---
                    logger.info("‚ö° Turbo Mode: Checking for turbo trade...")
                    # Implement turbo trade logic, else fallback to normal frequency

                # Otherwise, regular frequency logic
                if current_time - self.last_trade_time >= self.trade_frequency_seconds:
                    self.print_status()
                    signal = self.generate_signal()
                    if signal and signal['direction'] != 'NONE':
                        logger.info(f"üéØ Signal generated: {signal['direction']} (Confidence: {signal['confidence']:.1f}%)")
                        if self.execute_trade(signal):
                            self.last_trade_time = current_time
                            if self.enable_notifications:
                                logger.info(f"üì± Trade executed: {signal['direction']} at {signal['entry_price']:.5f}")
                    else:
                        logger.info("‚è≥ No trading signal generated - waiting for opportunity")

                time.sleep(5 if self.enable_turbo_mode else 30)
        except KeyboardInterrupt:
            logger.info("üõë Bot stopped by user")
        except Exception as e:
            logger.error(f"‚ùå Error in main loop: {e}")
            import traceback
            traceback.print_exc()
        finally:
            if self.is_connected:
                mt5.shutdown()
                logger.info("üîå MT5 connection closed")

def main():
    """Main function with demo account setup for V10"""
    bot = GoldexBotV10()

    # SET YOUR DEMO ACCOUNT CREDENTIALS HERE
    DEMO_LOGIN    = 845638              # <‚Äî your demo account number
    DEMO_PASSWORD = "GI7#svVJbBekrg"    # <‚Äî your demo password
    DEMO_SERVER   = "Coinexx-demo"      # <‚Äî your broker‚Äôs server name

    print("üöÄ GOLDEX AI V10 - Demo Account Setup")
    print("=" * 50)

    if not all([DEMO_LOGIN, DEMO_PASSWORD, DEMO_SERVER]):
        print("‚ùå Please set your demo account credentials in the script!")
        print("Update the following variables:")
        print("DEMO_LOGIN = 845638  # Your demo account number")
        print("DEMO_PASSWORD = 'GI7#svVJbBekrg'  # Your demo password")
        print("DEMO_SERVER = 'Coinexx-demo'  # Your broker server")
        return

    # Set demo credentials
    bot.set_demo_credentials(DEMO_LOGIN, DEMO_PASSWORD, DEMO_SERVER)

    # Run the bot
    bot.run()

if __name__ == "__main__":
    main()