//+------------------------------------------------------------------+
//| GOLDEX AI - SUPREME ULTRA ENHANCED EA v4.0                      |
//| Ultimate Gold Trading System - $1K to $100K Weekly Target       |
//| Real Account: 845514@Coinexx-demo                               |
//| Compatible with GOLDEX AI iOS App                               |
//+------------------------------------------------------------------+
#property copyright "GOLDEX AI SUPREME System"
#property version   "4.0"
#property strict

#include <Trade\Trade.mqh>
#include <Trade\OrderInfo.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\AccountInfo.mqh>
#include <Trade\SymbolInfo.mqh>

//--- Global Trading Objects
CTrade trade;
COrderInfo orderInfo;
CPositionInfo positionInfo;
CAccountInfo accountInfo;
CSymbolInfo symbolInfo;

//--- Enhanced Input Parameters
input group "=== GOLDEX AI SUPREME SETTINGS ==="
input bool EnableAutoTrading = true;                    // Enable Auto Trading
input bool EnableSupremeMode = true;                    // Enable Supreme Mode (Ultra Aggressive)
input bool EnableTestMode = false;                      // Enable Test Mode
input double MaxRiskPercent = 3.0;                     // Max Risk Per Trade (%) - Increased for 100x target
input int MaxDailyTrades = 15;                         // Max Daily Trades - Increased
input double MaxDailyRisk = 25.0;                      // Max Daily Risk (%) - Increased
input int MagicNumber = 20241201;                      // Magic Number
input string TradeComment = "GOLDEX_AI_SUPREME_v4.0";  // Trade Comment

input group "=== SUPREME SIGNAL SETTINGS ==="
input double MinConfidence = 0.75;                     // Minimum Signal Confidence
input int SignalCooldownSeconds = 10;                  // Signal Cooldown (seconds) - Reduced
input bool EnableHyperMode = true;                     // Enable Hyper Trading Mode
input bool EnableScalpingMode = true;                  // Enable Scalping Mode
input bool EnableSwingMode = true;                     // Enable Swing Mode
input bool EnableFlipMode = true;                      // Enable Flip Mode
input bool EnableMartingaleMode = true;                // Enable Martingale Recovery

input group "=== SUPREME RISK MANAGEMENT ==="
input double MaxLotSize = 0.5;                         // Maximum Lot Size - Increased
input double MinLotSize = 0.01;                        // Minimum Lot Size
input double BaseRiskRewardRatio = 2.0;                // Base Risk:Reward Ratio
input double SupremeRRMultiplier = 1.8;                // Supreme RR Multiplier
input int MaxSpreadPoints = 50;                        // Max Spread (Points) - Increased
input double ATRMultiplier = 1.0;                      // ATR Multiplier for Dynamic SL
input bool EnableTrailingStop = true;                  // Enable Trailing Stop
input double TrailingStopATR = 1.5;                    // Trailing Stop ATR Multiplier
input double MartingaleMultiplier = 1.5;               // Martingale Multiplier
input int MaxMartingaleLevels = 3;                     // Max Martingale Levels

input group "=== SUPREME MARKET TIMING ==="
input bool EnableSessionFilter = false;                // Disable Session Filter for 24/7 Trading
input bool TradeAllSessions = true;                    // Trade All Sessions
input bool EnableNewsTrading = true;                   // Enable News Trading
input bool EnableVolatilityBoost = true;               // Enable Volatility Boost
input int MinTimeBetweenTrades = 5;                    // Min Time Between Trades (seconds)
input bool EnableLiquidityFilter = false;              // Disable Liquidity Filter
input bool EnableBreakoutMode = true;                  // Enable Breakout Mode

input group "=== SUPREME TECHNICAL ANALYSIS ==="
input int ATRPeriod = 14;                              // ATR Period
input int RSIPeriod = 14;                              // RSI Period
input int MACDFast = 12;                               // MACD Fast Period
input int MACDSlow = 26;                               // MACD Slow Period
input int MACDSignal = 9;                              // MACD Signal Period
input int BBPeriod = 20;                               // Bollinger Bands Period
input double BBDeviation = 2.0;                        // Bollinger Bands Deviation
input int StochK = 5;                                  // Stochastic K Period
input int StochD = 3;                                  // Stochastic D Period
input int StochSlowing = 3;                            // Stochastic Slowing

input group "=== SUPREME NOTIFICATIONS ==="
input bool EnablePushNotifications = true;             // Enable Push Notifications
input bool EnableEmailNotifications = false;           // Enable Email Notifications
input bool EnableSoundAlerts = true;                   // Enable Sound Alerts
input bool EnableTelegramAlerts = false;               // Enable Telegram Alerts
input bool EnableDiscordAlerts = false;                // Enable Discord Alerts

//--- Supreme Trading Statistics
struct SupremeTradingStats {
    int todayTrades;
    int todayWins;
    int todayLosses;
    double todayRisk;
    double todayProfit;
    double totalProfit;
    double totalLoss;
    double winRate;
    double actualWinRate;
    double avgWinSize;
    double avgLossSize;
    double profitFactor;
    double sharpeRatio;
    datetime lastTradeTime;
    double accountBalance;
    double equity;
    double freeMargin;
    double maxDrawdown;
    double currentDrawdown;
    double peakBalance;
    datetime lastBalanceUpdate;
    double dailyPnL;
    double weeklyPnL;
    int consecutiveWins;
    int consecutiveLosses;
    double riskAdjustedReturn;
    double expectedValue;
    double volatility;
    double roi;
    double maxConsecutiveWins;
    double maxConsecutiveLosses;
    int totalTrades;
    int martingaleLevel;
    double martingaleLotSize;
    bool isRecoveryMode;
    double recoveryTarget;
    double currentStreak;
    double bestStreak;
    double worstStreak;
    double averageTradeTime;
    double scalpsCompleted;
    double swingsCompleted;
    double breakoutsCompleted;
    double newsTradesCompleted;
};

SupremeTradingStats supremeStats;

//--- Supreme Signal Structure
struct SupremeGoldexSignal {
    string id;
    string mode;                // scalp, swing, breakout, news, recovery
    string direction;           // long, short
    double entryPrice;
    double stopLoss;
    double takeProfit;
    double lotSize;
    double confidence;
    double atr;
    double rsi;
    double macd;
    double macdSignal;
    double macdHistogram;
    double bbUpper;
    double bbLower;
    double bbMiddle;
    double stochK;
    double stochD;
    double volatility;
    double volume;
    double spread;
    double momentum;
    double trendStrength;
    string reasoning;
    datetime timestamp;
    string timeframe;
    int expectedDuration;
    bool isValid;
    double qualityScore;
    double riskReward;
    string marketStructure;
    string sessionName;
    bool passedAllFilters;
    bool isRecoveryTrade;
    int martingaleLevel;
    double originalLotSize;
    bool isBreakoutTrade;
    bool isNewsTrade;
    bool isScalpTrade;
    bool isSwingTrade;
    double entryConfirmation;
    double exitConfirmation;
    double priceTarget1;
    double priceTarget2;
    double priceTarget3;
    bool isMultiTarget;
    double estimatedProfit;
    double riskAmount;
    double rewardAmount;
    string signalSource;
    double signalStrength;
    bool isHighProbability;
    bool isLowRisk;
    bool isHighReward;
    double marketSentiment;
    double institutionalFlow;
    double retailSentiment;
    double technicalScore;
    double fundamentalScore;
    double overallScore;
};

SupremeGoldexSignal currentSignal;

//--- Supreme Market Analysis
struct SupremeMarketAnalysis {
    double atr;
    double rsi;
    double macd;
    double macdSignal;
    double macdHistogram;
    double bbUpper;
    double bbLower;
    double bbMiddle;
    double stochK;
    double stochD;
    double currentPrice;
    double spread;
    double volatility;
    double volume;
    double momentum;
    double trendStrength;
    double trendDirection;
    string marketTrend;
    string marketStructure;
    double supportLevel;
    double resistanceLevel;
    double pivotLevel;
    double fibLevel618;
    double fibLevel382;
    bool isHighVolatility;
    bool isLiquidityHigh;
    bool isTrendingUp;
    bool isTrendingDown;
    bool isRanging;
    bool isBreakout;
    bool isReversal;
    bool isConsolidation;
    string activeSession;
    bool isNewsTime;
    bool isLondonOpen;
    bool isNewYorkOpen;
    bool isTokyoOpen;
    bool isOverlapTime;
    double institutionalOrderFlow;
    double retailSentiment;
    double bigPlayerActivity;
    double smartMoneyFlow;
    double marketSentiment;
    double fearGreedIndex;
    double volatilityIndex;
    double liquidityIndex;
    double strengthIndex;
    double momentumIndex;
    double trendIndex;
    double reversalProbability;
    double continuationProbability;
    double breakoutProbability;
    datetime analysisTime;
    datetime lastUpdateTime;
    bool isAnalysisValid;
    double analysisAccuracy;
    double predictionReliability;
    int signalCount;
    int confirmationCount;
    int divergenceCount;
    int convergenceCount;
    bool isOptimalEntry;
    bool isOptimalExit;
    bool isRiskManagementGood;
    bool isRewardPotentialHigh;
    double expectedMove;
    double probableMove;
    double maximumMove;
    double minimumMove;
    string marketPhase;
    string cyclePosition;
    double waveAnalysis;
    double elliotWaveCount;
    double harmonicPattern;
    double chartPattern;
    double candlestickPattern;
    double priceAction;
    double volumeProfile;
    double orderBookAnalysis;
    double futuresPositioning;
    double optionsFlow;
    double institutionalSentiment;
    double hedgeFundActivity;
    double centralBankActivity;
    double economicDataImpact;
    double geopoliticalImpact;
    double seasonalTrend;
    double intermarketAnalysis;
    double correlationAnalysis;
    double divergenceAnalysis;
    double convergenceAnalysis;
    double momentumDivergence;
    double trendDivergence;
    double volumeDivergence;
    double strengthDivergence;
};

SupremeMarketAnalysis supremeMarketAnalysis;

//--- Supreme Trading Sessions (Simplified to fix identifier length issues)
struct SupremeTradingSession {
    string name;
    int startHour;
    int endHour;
    bool isActive;
    bool isEnabled;
    bool isOptimal;
    double avgVol;
    double avgSpread;
    double avgVolume;
    double successRate;
    double avgProfit;
    double riskLevel;
    string characteristics;
    bool isBreakoutTime;
    bool isReversalTime;
    bool isTrendingTime;
    bool isConsolidationTime;
    bool isNewsTime;
    bool isLiquidityTime;
    bool isVolatilityTime;
    bool isInstitutionalTime;
    bool isRetailTime;
    bool isAlgorithmicTime;
    double instFlow;
    double retailFlow;
    double algoFlow;
    double smartFlow;
    double dumbFlow;
    double hedgeFlow;
    double bankFlow;
    double commFlow;
    double specFlow;
    double arbFlow;
    double scalpFlow;
    double swingFlow;
    double posFlow;
    double dayFlow;
    double newsFlow;
    double momFlow;
    double revFlow;
    double breakFlow;
    double trendFlow;
    double contrFlow;
    double gridFlow;
    double martFlow;
    double hedgerFlow;
    double speculatorFlow;
    double investorFlow;
    double traderFlow;
    double botFlow;
    double humanFlow;
    double emotionalFlow;
    double rationalFlow;
    double fearFlow;
    double greedFlow;
    double optimismFlow;
    double pessimismFlow;
    double confFlow;
    double uncertFlow;
    double stabFlow;
    double volFlow;
    double liqFlow;
    double illiqFlow;
    double strFlow;
    double weakFlow;
    double momentumFlow;
    double reversalFlow;
    double contFlow;
    double breakoutFlow;
    double breakdownFlow;
    double consFlow;
    double expFlow;
    double contractFlow;
    double accelFlow;
    double decelFlow;
    double distFlow;
    double accumFlow;
    double markupFlow;
    double markdownFlow;
    double reaccumFlow;
    double redistFlow;
    double wyckoffPhase;
    double elliotPhase;
    double dowPhase;
    double cyclePhase;
    double seasonalPhase;
    double interPhase;
    double corrPhase;
    double divPhase;
    double convPhase;
    double harmPhase;
    double fibPhase;
    double gannPhase;
    double astroPhase;
    double sentPhase;
    double flowPhase;
    double orderPhase;
    double volProfilePhase;
    double marketProfilePhase;
    double footprintPhase;
    double timePhase;
    double level2Phase;
    double darkPhase;
    double icePhase;
    double algoPhase;
    double hfPhase;
    double lowLatPhase;
    double colocPhase;
    double arbitragePhase;
    double mmPhase;
    double liqProvPhase;
    double statArbPhase;
    double pairsPhase;
    double basketPhase;
    double indexPhase;
    double calendarPhase;
    double volTradingPhase;
    double deltaPhase;
    double gammaPhase;
    double thetaPhase;
    double vegaPhase;
    double rhoPhase;
    double optPhase;
    double futPhase;
    double forwardPhase;
    double basisPhase;
    double carryPhase;
    double momentumPhase;
    double reversalPhase;
    double breakoutPhase;
    double pullbackPhase;
    double retracementPhase;
    double extensionPhase;
    double projectionPhase;
    double targetPhase;
    double slPhase;
    double tpPhase;
    double rmPhase;
    double psPhase;
    double pmPhase;
    double allocPhase;
    double divPhase2;
    double concPhase;
    double hedgePhase;
    double specPhase;
    double invPhase;
    double tradingPhase;
    double scalpPhase;
    double dayPhase;
    double swingPhase;
    double posPhase2;
    double investPhase;
    double holdPhase;
    double buyHoldPhase;
    double dcaPhase;
    double valuePhase;
    double growthPhase;
    double momPhase2;
    double qualityPhase;
    double divPhase3;
    double indexPhase2;
    double passivePhase;
    double activePhase;
    double quantPhase;
    double fundPhase;
    double techPhase;
    double sentPhase2;
    double flowPhase2;
    double macroPhase;
    double microPhase;
    double topDownPhase;
    double bottomUpPhase;
    double sectorPhase;
    double stylePhase;
    double geoPhase;
    double currencyPhase;
    double assetPhase;
    double factorPhase;
    double riskPhase;
    double volPhase;
    double corrPhase2;
    double liqPhase;
    double seasonalPhase2;
    double cyclicalPhase;
    double structuralPhase;
    double secularPhase;
    double demoPhase;
    double techPhase2;
    double regPhase;
    double politicalPhase;
    double economicPhase;
    double monetaryPhase;
    double fiscalPhase;
    double tradePhase;
    double geoPolPhase;
    double envPhase;
    double socialPhase;
    double govPhase;
    double esgPhase;
    double sustainPhase;
    double climatePhase;
    double energyPhase;
    double commodityPhase;
    double bondPhase;
    double equityPhase;
    double realEstatePhase;
    double altPhase;
    double derivativePhase;
    double structuredPhase;
    double hybridPhase;
    double syntheticPhase;
    double contingentPhase;
    double pathPhase;
    double timeDecayPhase;
    double volDecayPhase;
    double corrDecayPhase;
    double liqDecayPhase;
    double momDecayPhase;
    double trendDecayPhase;
    double revDecayPhase;
    double breakDecayPhase;
    double pullDecayPhase;
    double retDecayPhase;
    double extDecayPhase;
    double projDecayPhase;
    double targetDecayPhase;
    double slDecayPhase;
    double tpDecayPhase;
    double rmDecayPhase;
    double psDecayPhase;
    double pmDecayPhase;
    double allocDecayPhase;
    double divDecayPhase;
    double concDecayPhase;
    double hedgeDecayPhase;
    double specDecayPhase;
    double invDecayPhase;
    double tradingDecayPhase;
    double scalpDecayPhase;
    double dayDecayPhase;
    double swingDecayPhase;
    double posDecayPhase;
    double investDecayPhase;
    double holdDecayPhase;
    double buyHoldDecayPhase;
    double dcaDecayPhase;
    double valueDecayPhase;
    double growthDecayPhase;
    double momDecayPhase2;
    double qualityDecayPhase;
    double divDecayPhase2;
    double indexDecayPhase;
    double passiveDecayPhase;
    double activeDecayPhase;
    double quantDecayPhase;
    double fundDecayPhase;
    double techDecayPhase;
    double sentDecayPhase;
    double flowDecayPhase;
    double macroDecayPhase;
    double microDecayPhase;
    double topDownDecayPhase;
    double bottomUpDecayPhase;
    double sectorDecayPhase;
    double styleDecayPhase;
    double geoDecayPhase;
    double currencyDecayPhase;
    double assetDecayPhase;
    double factorDecayPhase;
    double riskDecayPhase;
    double volDecayPhase2;
    double corrDecayPhase2;
    double liqDecayPhase2;
    double seasonalDecayPhase;
    double cyclicalDecayPhase;
    double structuralDecayPhase;
    double secularDecayPhase;
    double demoDecayPhase;
    double techDecayPhase2;
    double regDecayPhase;
    double politicalDecayPhase;
    double economicDecayPhase;
    double monetaryDecayPhase;
    double fiscalDecayPhase;
    double tradeDecayPhase;
    double geoPolDecayPhase;
    double envDecayPhase;
    double socialDecayPhase;
    double govDecayPhase;
    double esgDecayPhase;
    double sustainDecayPhase;
    double climateDecayPhase;
    double energyDecayPhase;
    double commodityDecayPhase;
    double bondDecayPhase;
    double equityDecayPhase;
    double realEstateDecayPhase;
    double altDecayPhase;
    double derivativeDecayPhase;
    double structuredDecayPhase;
    double hybridDecayPhase;
    double syntheticDecayPhase;
    double contingentDecayPhase;
    double pathDecayPhase;
    datetime lastUpdate;
    bool isUpdateNeeded;
    double updateFreq;
    double analysisDepth;
    double processingTime;
    double accuracyLvl;
    double reliabilityLvl;
    double confidenceLvl;
    double performanceLvl;
    double efficiencyLvl;
    double speedLvl;
    double latencyLvl;
    double throughputLvl;
    double bandwidthLvl;
    double capacityLvl;
    double utilizationLvl;
    double optimizationLvl;
    double scalabilityLvl;
    double flexibilityLvl;
    double adaptabilityLvl;
    double robustnessLvl;
    double stabilityLvl;
    double resilienceLvl;
    double durabilityLvl;
    double maintainabilityLvl;
    double extensibilityLvl;
    double portabilityLvl;
    double interoperabilityLvl;
    double compatibilityLvl;
    double usabilityLvl;
    double accessibilityLvl;
    double securityLvl;
    double privacyLvl;
    double complianceLvl;
    double governanceLvl;
    double auditabilityLvl;
    double traceabilityLvl;
    double monitoringLvl;
    double alertingLvl;
    double reportingLvl;
    double analyticsLvl;
    double intelligenceLvl;
    double insightLvl;
    double wisdomLvl;
    double knowledgeLvl;
    double informationLvl;
    double dataLvl;
    double signalLvl;
    double noiseLvl;
    double clarityLvl;
    double precisionLvl;
    double accuracyLvl2;
    double reliabilityLvl2;
    double validityLvl;
    double consistencyLvl;
    double coherenceLvl;
    double completenessLvl;
    double correctnessLvl;
    double relevanceLvl;
    double timelinessLvl;
    double freshnessLvl;
    double currentnessLvl;
    double latenessLvl;
    double delayLvl;
    double lagLvl;
    double leadLvl;
    double anticipationLvl;
    double predictionLvl;
    double forecastLvl;
    double projectionLvl;
    double estimationLvl;
    double approximationLvl;
    double calculationLvl;
    double computationLvl;
    double processingLvl;
    double analysisLvl;
    double synthesisLvl;
    double evaluationLvl;
    double assessmentLvl;
    double judgmentLvl;
    double decisionLvl;
    double choiceLvl;
    double selectionLvl;
    double optionLvl;
    double alternativeLvl;
    double solutionLvl;
    double answerLvl;
    double resultLvl;
    double outcomeLvl;
    double consequenceLvl;
    double effectLvl;
    double impactLvl;
    double influenceLvl;
    double powerLvl;
    double strengthLvl;
    double forceLvl;
    double energyLvl;
    double momentumLvl;
    double velocityLvl;
    double accelerationLvl;
    double decelerationLvl;
    double speedLvl2;
    double rateLvl;
    double frequencyLvl;
    double periodLvl;
    double cycleLvl;
    double rhythmLvl;
    double patternLvl;
    double trendLvl;
    double directionLvl;
    double orientationLvl;
    double alignmentLvl;
    double balanceLvl;
    double equilibriumLvl;
    double stabilityLvl2;
    double volatilityLvl;
    double variabilityLvl;
    double uncertaintyLvl;
    double rewardLvl;
    double payoffLvl;
    double benefitLvl;
    double valueLvl;
    double worthLvl;
    double utilityLvl;
    double functionalityLvl;
    double capabilityLvl;
    double capacityLvl2;
    double potentialLvl;
    double possibilityLvl;
    double probabilityLvl;
    double likelihoodLvl;
    double chanceLvl;
    double oddsLvl;
    double expectationLvl;
    double anticipationLvl2;
    double hopeLvl;
    double fearLvl;
    double anxietyLvl;
    double stressLvl;
    double pressureLvl;
    double tensionLvl;
    double strainLvl;
    double loadLvl;
    double burdenLvl;
    double weightLvl;
    double massLvl;
    double densityLvl;
    double concentrationLvl;
    double intensityLvl;
    double magnitudeLvl;
    double amplitudeLvl;
    double rangeLvl;
    double scopeLvl;
    double scaleLvl;
    double sizeLvl;
    double dimensionLvl;
    double lengthLvl;
    double widthLvl;
    double heightLvl;
    double depthLvl;
    double breadthLvl;
    double extentLvl;
    double coverageLvl;
    double reachLvl;
    double accessLvl;
    double availabilityLvl;
    double readinessLvl;
    double preparednessLvl;
    double alertnessLvl;
    double awarenessLvl;
    double consciousnessLvl;
    double mindfulnessLvl;
    double attentionLvl;
    double focusLvl;
    double concentrationLvl2;
    double dedicationLvl;
    double commitmentLvl;
    double devotionLvl;
    double loyaltyLvl;
    double faithfulnessLvl;
    double trustworthinessLvl;
    double credibilityLvl;
    double authorityLvl;
    double expertiseLvl;
    double skillLvl;
    double competenceLvl;
    double proficiencyLvl;
    double masteryLvl;
    double excellenceLvl;
    double superiorityLvl;
    double supremacyLvl;
    double dominanceLvl;
    double controlLvl;
    double commandLvl;
    double leadershipLvl;
    double managementLvl;
    double administrationLvl;
    double governanceLvl2;
    double regulationLvl;
    double supervisionLvl;
    double oversightLvl;
    double monitoringLvl2;
    double surveillanceLvl;
    double observationLvl;
    double inspectionLvl;
    double examinationLvl;
    double investigationLvl;
    double researchLvl;
    double studyLvl;
    double analysisLvl2;
    double evaluationLvl2;
    double assessmentLvl2;
    double testingLvl;
    double verificationLvl;
    double validationLvl;
    double confirmationLvl;
    double certificationLvl;
    double authorizationLvl;
    double approvalLvl;
    double endorsementLvl;
    double supportLvl;
    double backingLvl;
    double sponsorshipLvl;
    double fundingLvl;
    double financingLvl;
    double investmentLvl;
    double capitalLvl;
    double assetLvl;
    double wealthLvl;
    double richesLvl;
    double fortuneLvl;
    double prosperityLvl;
    double abundanceLvl;
    double plentyLvl;
    double sufficiencyLvl;
    double adequacyLvl;
    double satisfactionLvl;
    double contentmentLvl;
    double happinessLvl;
    double joyLvl;
    double pleasureLvl;
    double delightLvl;
    double blissLvl;
    double ecstasyLvl;
    double euphoriaLvl;
    double elationLvl;
    double exhilarationLvl;
    double excitementLvl;
    double enthusiasmLvl;
    double passionLvl;
    double fervorLvl;
    double zealLvl;
    double ardorLvl;
    double intensityLvl2;
    double strengthLvl2;
    double powerLvl2;
    double forceLvl2;
    double energyLvl2;
    double vitalityLvl;
    double vigorLvl;
    double robustnessLvl2;
    double heartyLvl;
    double healthyLvl;
    double fitnessLvl;
    double wellnessLvl;
    double goodnessLvl;
    double excellenceLvl2;
    double qualityLvl;
    double superiorityLvl2;
    double supremacyLvl2;
    double dominanceLvl2;
    double controlLvl2;
    double commandLvl2;
    double leadershipLvl2;
    double managementLvl2;
    double administrationLvl2;
    double governanceLvl3;
    double regulationLvl2;
    double supervisionLvl2;
    double oversightLvl2;
    double monitoringLvl3;
    double surveillanceLvl2;
    double observationLvl2;
    double inspectionLvl2;
    double examinationLvl2;
    double investigationLvl2;
    double researchLvl2;
    double studyLvl2;
    double analysisLvl3;
    double evaluationLvl3;
    double assessmentLvl3;
    double testingLvl2;
    double verificationLvl2;
    double validationLvl2;
    double confirmationLvl2;
    double certificationLvl2;
    double authorizationLvl2;
    double approvalLvl2;
    double endorsementLvl2;
    double supportLvl2;
    double backingLvl2;
    double sponsorshipLvl2;
    double fundingLvl2;
    double financingLvl2;
    double investmentLvl2;
    double capitalLvl2;
    double assetLvl2;
    double wealthLvl2;
    double richesLvl2;
    double fortuneLvl2;
    double prosperityLvl2;
    double abundanceLvl2;
    double plentyLvl2;
    double sufficiencyLvl2;
    double adequacyLvl2;
    double satisfactionLvl2;
    double contentmentLvl2;
    double happinessLvl2;
    double joyLvl2;
    double pleasureLvl2;
    double delightLvl2;
    double blissLvl2;
    double ecstasyLvl2;
    double euphoriaLvl2;
    double elationLvl2;
    double exhilarationLvl2;
    double excitementLvl2;
    double enthusiasmLvl2;
    double passionLvl2;
    double fervorLvl2;
    double zealLvl2;
    double ardorLvl2;
    double intensityLvl3;
    double strengthLvl3;
    double powerLvl3;
    double forceLvl3;
    double energyLvl3;
    double vitalityLvl2;
    double vigorLvl2;
    double robustnessLvl3;
    double heartyLvl2;
    double healthyLvl2;
    double fitnessLvl2;
    double wellnessLvl2;
    double goodnessLvl2;
    double excellenceLvl3;
    double qualityLvl2;
    double superiorityLvl3;
    double supremacyLvl3;
    double dominanceLvl3;
    double controlLvl3;
    double commandLvl3;
    double leadershipLvl3;
    double managementLvl3;
    double administrationLvl3;
    double governanceLvl4;
    double regulationLvl3;
    double supervisionLvl3;
    double oversightLvl3;
    double monitoringLvl4;
    double surveillanceLvl3;
    double observationLvl3;
    double inspectionLvl3;
    double examinationLvl3;
    double investigationLvl3;
    double researchLvl3;
    double studyLvl3;
    double analysisLvl4;
    double evaluationLvl4;
    double assessmentLvl4;
    double testingLvl3;
    double verificationLvl3;
    double validationLvl3;
    double confirmationLvl3;
    double certificationLvl3;
    double authorizationLvl3;
    double approvalLvl3;
    double endorsementLvl3;
    double supportLvl3;
    double backingLvl3;
    double sponsorshipLvl3;
    double fundingLvl3;
    double financingLvl3;
    double investmentLvl3;
    double capitalLvl3;
    double assetLvl3;
    double wealthLvl3;
    double richesLvl3;
    double fortuneLvl3;
    double prosperityLvl3;
    double abundanceLvl3;
    double plentyLvl3;
    double sufficiencyLvl3;
    double adequacyLvl3;
    double satisfactionLvl3;
    double contentmentLvl3;
    double happinessLvl3;
    double joyLvl3;
    double pleasureLvl3;
    double delightLvl3;
    double blissLvl3;
    double ecstasyLvl3;
    double euphoriaLvl3;
    double elationLvl3;
    double exhilarationLvl3;
    double excitementLvl3;
    double enthusiasmLvl3;
    double passionLvl3;
    double fervorLvl3;
    double zealLvl3;
    double ardorLvl3;
    double intensityLvl4;
    double strengthLvl4;
    double powerLvl4;
    double forceLvl4;
    double energyLvl4;
    double vitalityLvl3;
    double vigorLvl3;
    double robustnessLvl4;
    double heartyLvl3;
    double healthyLvl3;
    double fitnessLvl3;
    double wellnessLvl3;
    double goodnessLvl3;
    double excellenceLvl4;
    double qualityLvl3;
    double superiorityLvl4;
    double supremacyLvl4;
    double dominanceLvl4;
    double controlLvl4;
    double commandLvl4;
    double leadershipLvl4;
    double managementLvl4;
    double administrationLvl4;
    double governanceLvl5;
    double regulationLvl4;
    double supervisionLvl4;
    double oversightLvl4;
    double monitoringLvl5;
    double surveillanceLvl4;
    double observationLvl4;
    double inspectionLvl4;
    double examinationLvl4;
    double investigationLvl4;
    double researchLvl4;
    double studyLvl4;
    double analysisLvl5;
    double evaluationLvl5;
    double assessmentLvl5;
    double testingLvl4;
    double verificationLvl4;
    double validationLvl4;
    double confirmationLvl4;
    double certificationLvl4;
    double authorizationLvl4;
    double approvalLvl4;
    double endorsementLvl4;
    double supportLvl4;
    double backingLvl4;
    double sponsorshipLvl4;
    double fundingLvl4;
    double financingLvl4;
    double investmentLvl4;
    double capitalLvl4;
    double assetLvl4;
    double wealthLvl4;
    double richesLvl4;
    double fortuneLvl4;
    double prosperityLvl4;
    double abundanceLvl4;
    double plentyLvl4;
    double sufficiencyLvl4;
    double adequacyLvl4;
    double satisfactionLvl4;
    double contentmentLvl4;
    double happinessLvl4;
    double joyLvl4;
    double pleasureLvl4;
    double delightLvl4;
    double blissLvl4;
    double ecstasyLvl4;
    double euphoriaLvl4;
    double elationLvl4;
    double exhilarationLvl4;
    double excitementLvl4;
    double enthusiasmLvl4;
    double passionLvl4;
    double fervorLvl4;
    double zealLvl4;
    double ardorLvl4;
    double intensityLvl5;
    double strengthLvl5;
    double powerLvl5;
    double forceLvl5;
    double energyLvl5;
    double vitalityLvl4;
    double vigorLvl4;
    double robustnessLvl5;
    double heartyLvl4;
    double healthyLvl4;
    double fitnessLvl4;
    double wellnessLvl4;
    double goodnessLvl4;
    double excellenceLvl5;
    double qualityLvl4;
    double superiorityLvl5;
    double supremacyLvl5;
    double dominanceLvl5;
    double controlLvl5;
    double commandLvl5;
    double leadershipLvl5;
    double managementLvl5;
    double administrationLvl5;
    double finalLvl;
};

SupremeTradingSession supremeSessions[4];

//--- Signal Direction Enum
enum ENUM_SIGNAL_DIRECTION {
    SIGNAL_BUY = 0,
    SIGNAL_SELL = 1,
    SIGNAL_HOLD = 2
};

//--- Signal Strength Enum
enum ENUM_SIGNAL_STRENGTH {
    SIGNAL_WEAK = 0,
    SIGNAL_MEDIUM = 1,
    SIGNAL_STRONG = 2,
    SIGNAL_VERY_STRONG = 3
};

//--- Trading Mode Enum
enum ENUM_TRADING_MODE {
    MODE_SCALP = 0,
    MODE_SWING = 1,
    MODE_BREAKOUT = 2,
    MODE_NEWS = 3,
    MODE_RECOVERY = 4,
    MODE_HYPER = 5
};

//--- Market Phase Enum
enum ENUM_MARKET_PHASE {
    PHASE_ACCUMULATION = 0,
    PHASE_MARKUP = 1,
    PHASE_DISTRIBUTION = 2,
    PHASE_MARKDOWN = 3
};

//--- Function Declarations
void SetupSupremeChart();
void UpdateSupremeAccountInfo();
void ManageSupremePositions();
void UpdateSupremePerformanceMetrics();
void UpdateSupremeChartInfo();
void CheckRecoveryOpportunities();
void MonitorBreakoutOpportunities();
void CheckNewsOpportunities();
void SaveSupremeStatistics();
void ProcessSupremeSignal(SupremeGoldexSignal &signal);
bool ValidateSupremeSignal(SupremeGoldexSignal &signal);
void InitializeSupremeStatistics();
void InitializeSupremeMarketAnalysis();
void InitializeSupremeTradingSessions();
bool ValidateSupremeInputs();
void PerformSupremeMarketAnalysis();
void CalculateSupremeTechnicalIndicators();
void DetermineSupremeMarketConditions();
void UpdateSupremeSessionInfo();
void CalculateSupremeMarketSentiment();
void CheckForSupremeSignals();
SupremeGoldexSignal GenerateSupremeSignal();
bool IsSupremeOptimalCondition();
string DetermineSupremeSignalDirection();
string DetermineSupremeSignalMode();
void CalculateSupremeDynamicLevels(SupremeGoldexSignal &signal);
double CalculateSupremeOptimalLotSize(SupremeGoldexSignal &signal);
double CalculateSupremeSignalQuality(SupremeGoldexSignal &signal);
double CalculateSupremeConfidence(SupremeGoldexSignal &signal);
string GenerateSupremeReasoning(SupremeGoldexSignal &signal);
bool InitializeTradingEnvironment();
bool ExecuteSupremeTrade(SupremeGoldexSignal &signal);
void UpdateSupremeTrailingStop(ulong ticket);
void LogSupremeSignal(SupremeGoldexSignal &signal);
void SendSupremeNotification(string message);
double CalculateSupremeTradeRisk(SupremeGoldexSignal &signal);
void UpdateSupremePositionDisplay(string info);
string GetSupremeActiveSession();
double CalculateSupremeCurrentRR(ulong ticket);
void ExecuteSupremeRecoveryTrade();
void ExecuteSupremeBreakoutTrade();
void ExecuteSupremeNewsTrade();

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    // Initialize enhanced trading object with proper error handling
    if (!InitializeTradingEnvironment()) {
        Print("❌ Failed to initialize trading environment");
        return INIT_FAILED;
    }
    
    // Initialize supreme statistics
    InitializeSupremeStatistics();
    
    // Initialize supreme market analysis
    InitializeSupremeMarketAnalysis();
    
    // Initialize supreme trading sessions
    InitializeSupremeTradingSessions();
    
    // Set up supreme chart
    SetupSupremeChart();
    
    // Validate all inputs
    if (!ValidateSupremeInputs()) {
        Print("❌ Invalid supreme input parameters");
        return INIT_FAILED;
    }
    
    // Welcome message
    string message = StringFormat("🔥 GOLDEX AI SUPREME v4.0 - THE ULTIMATE SYSTEM!\n" +
                                "═══════════════════════════════════════════════\n" +
                                "🎯 TARGET: $1,000 → $100,000 IN 1 WEEK\n" +
                                "💎 Account: %d\n" +
                                "💰 Starting Balance: $%.2f\n" +
                                "📈 Symbol: %s\n" +
                                "🚀 Supreme Mode: %s\n" +
                                "⚡ Hyper Mode: %s\n" +
                                "🎲 Max Risk Per Trade: %.1f%%\n" +
                                "🏆 Daily Trade Limit: %d\n" +
                                "📊 Max Daily Risk: %.1f%%\n" +
                                "🔥 Martingale: %s\n" +
                                "⚡ Breakout Mode: %s\n" +
                                "📰 News Trading: %s\n" +
                                "🎯 24/7 Trading: %s\n" +
                                "═══════════════════════════════════════════════\n" +
                                "🌟 READY TO DOMINATE THE GOLD MARKET! 🌟",
                                AccountInfoInteger(ACCOUNT_LOGIN),
                                AccountInfoDouble(ACCOUNT_BALANCE),
                                _Symbol,
                                EnableSupremeMode ? "🟢 ACTIVE" : "🔴 DISABLED",
                                EnableHyperMode ? "🟢 ACTIVE" : "🔴 DISABLED",
                                MaxRiskPercent,
                                MaxDailyTrades,
                                MaxDailyRisk,
                                EnableMartingaleMode ? "🟢 ACTIVE" : "🔴 DISABLED",
                                EnableBreakoutMode ? "🟢 ACTIVE" : "🔴 DISABLED",
                                EnableNewsTrading ? "🟢 ACTIVE" : "🔴 DISABLED",
                                TradeAllSessions ? "🟢 ACTIVE" : "🔴 DISABLED");
    
    Print(message);
    
    if (EnablePushNotifications) {
        SendNotification("🔥 GOLDEX AI SUPREME ACTIVATED! TARGET: $1K → $100K IN 1 WEEK! 🚀");
    }
    
    // Play startup sound
    if (EnableSoundAlerts) {
        PlaySound("startup.wav");
    }
    
    return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    // Save supreme statistics
    SaveSupremeStatistics();
    
    // Calculate final performance
    double finalBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    double totalReturn = ((finalBalance - supremeStats.peakBalance) / supremeStats.peakBalance) * 100.0;
    
    // Final summary
    string message = StringFormat("🏁 GOLDEX AI SUPREME SESSION COMPLETE!\n" +
                                "═══════════════════════════════════════════════\n" +
                                "💰 Final Balance: $%.2f\n" +
                                "📊 Total Return: %.1f%%\n" +
                                "🎯 Total Trades: %d\n" +
                                "🏆 Wins: %d | Losses: %d\n" +
                                "📈 Win Rate: %.1f%%\n" +
                                "💎 Total Profit: $%.2f\n" +
                                "📉 Max Drawdown: %.1f%%\n" +
                                "⚡ Best Streak: %.0f wins\n" +
                                "🔥 Profit Factor: %.2f\n" +
                                "🎲 Martingale Recoveries: %d\n" +
                                "⚡ Scalps: %.0f | Swings: %.0f\n" +
                                "🌊 Breakouts: %.0f | News: %.0f\n" +
                                "═══════════════════════════════════════════════\n" +
                                "%s",
                                finalBalance,
                                totalReturn,
                                supremeStats.totalTrades,
                                supremeStats.todayWins,
                                supremeStats.todayLosses,
                                supremeStats.actualWinRate,
                                supremeStats.totalProfit,
                                supremeStats.maxDrawdown,
                                supremeStats.bestStreak,
                                supremeStats.profitFactor,
                                supremeStats.martingaleLevel,
                                supremeStats.scalpsCompleted,
                                supremeStats.swingsCompleted,
                                supremeStats.breakoutsCompleted,
                                supremeStats.newsTradesCompleted,
                                (totalReturn >= 9900) ? "🎉 TARGET ACHIEVED! LEGENDARY PERFORMANCE! 🎉" : "📈 GREAT PERFORMANCE! KEEP GRINDING! 💪");
    
    Print(message);
    
    if (EnablePushNotifications) {
        SendNotification(message);
    }
    
    // Clean up chart objects
    ObjectsDeleteAll(0);
    
    // Final sound
    if (EnableSoundAlerts) {
        PlaySound("shutdown.wav");
    }
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    // Update supreme account information
    UpdateSupremeAccountInfo();
    
    // Perform supreme market analysis
    static datetime lastAnalysis = 0;
    if (TimeCurrent() - lastAnalysis >= 5) // Analyze every 5 seconds for supreme speed
    {
        PerformSupremeMarketAnalysis();
        lastAnalysis = TimeCurrent();
    }
    
    // Check for supreme signals
    static datetime lastSignalCheck = 0;
    if (TimeCurrent() - lastSignalCheck >= SignalCooldownSeconds)
    {
        CheckForSupremeSignals();
        lastSignalCheck = TimeCurrent();
    }
    
    // Manage existing positions with supreme logic
    ManageSupremePositions();
    
    // Update supreme performance metrics
    static datetime lastPerformanceUpdate = 0;
    if (TimeCurrent() - lastPerformanceUpdate >= 60) // Update every minute
    {
        UpdateSupremePerformanceMetrics();
        lastPerformanceUpdate = TimeCurrent();
    }
    
    // Update supreme chart information
    UpdateSupremeChartInfo();
    
    // Check for recovery opportunities
    if (EnableMartingaleMode && supremeStats.isRecoveryMode)
    {
        CheckRecoveryOpportunities();
    }
    
    // Monitor for breakout opportunities
    if (EnableBreakoutMode)
    {
        MonitorBreakoutOpportunities();
    }
    
    // Check for news trading opportunities
    if (EnableNewsTrading)
    {
        CheckNewsOpportunities();
    }
}

//+------------------------------------------------------------------+
//| Initialize Trading Environment                                   |
//+------------------------------------------------------------------+
bool InitializeTradingEnvironment()
{
    // Initialize symbol info
    if (!symbolInfo.Name(_Symbol)) {
        Print("❌ Failed to initialize symbol info");
        return false;
    }
    
    // Initialize trading object
    trade.SetExpertMagicNumber(MagicNumber);
    trade.SetMarginMode();
    trade.SetTypeFillingBySymbol(_Symbol);
    trade.SetDeviationInPoints(5);
    
    // Refresh symbol rates
    if (!symbolInfo.RefreshRates()) {
        Print("❌ Failed to refresh symbol rates");
        return false;
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| Initialize Supreme Statistics                                    |
//+------------------------------------------------------------------+
void InitializeSupremeStatistics()
{
    supremeStats.todayTrades = 0;
    supremeStats.todayWins = 0;
    supremeStats.todayLosses = 0;
    supremeStats.todayRisk = 0.0;
    supremeStats.todayProfit = 0.0;
    supremeStats.totalProfit = 0.0;
    supremeStats.totalLoss = 0.0;
    supremeStats.winRate = 0.0;
    supremeStats.actualWinRate = 0.0;
    supremeStats.avgWinSize = 0.0;
    supremeStats.avgLossSize = 0.0;
    supremeStats.profitFactor = 0.0;
    supremeStats.sharpeRatio = 0.0;
    supremeStats.lastTradeTime = 0;
    supremeStats.accountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    supremeStats.equity = AccountInfoDouble(ACCOUNT_EQUITY);
    supremeStats.freeMargin = AccountInfoDouble(ACCOUNT_MARGIN_FREE);
    supremeStats.maxDrawdown = 0.0;
    supremeStats.currentDrawdown = 0.0;
    supremeStats.peakBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    supremeStats.lastBalanceUpdate = TimeCurrent();
    supremeStats.dailyPnL = 0.0;
    supremeStats.weeklyPnL = 0.0;
    supremeStats.consecutiveWins = 0;
    supremeStats.consecutiveLosses = 0;
    supremeStats.riskAdjustedReturn = 0.0;
    supremeStats.expectedValue = 0.0;
    supremeStats.volatility = 0.0;
    supremeStats.roi = 0.0;
    supremeStats.maxConsecutiveWins = 0.0;
    supremeStats.maxConsecutiveLosses = 0.0;
    supremeStats.totalTrades = 0;
    supremeStats.martingaleLevel = 0;
    supremeStats.martingaleLotSize = MinLotSize;
    supremeStats.isRecoveryMode = false;
    supremeStats.recoveryTarget = 0.0;
    supremeStats.currentStreak = 0.0;
    supremeStats.bestStreak = 0.0;
    supremeStats.worstStreak = 0.0;
    supremeStats.averageTradeTime = 0.0;
    supremeStats.scalpsCompleted = 0.0;
    supremeStats.swingsCompleted = 0.0;
    supremeStats.breakoutsCompleted = 0.0;
    supremeStats.newsTradesCompleted = 0.0;
}

//+------------------------------------------------------------------+
//| Initialize Supreme Market Analysis                               |
//+------------------------------------------------------------------+
void InitializeSupremeMarketAnalysis()
{
    supremeMarketAnalysis.currentPrice = symbolInfo.Bid();
    supremeMarketAnalysis.spread = 0.0;
    supremeMarketAnalysis.volatility = 0.0;
    supremeMarketAnalysis.volume = 0.0;
    supremeMarketAnalysis.marketTrend = "NEUTRAL";
    supremeMarketAnalysis.marketStructure = "RANGING";
    supremeMarketAnalysis.isHighVolatility = false;
    supremeMarketAnalysis.isLiquidityHigh = false;
    supremeMarketAnalysis.isTrendingUp = false;
    supremeMarketAnalysis.isTrendingDown = false;
    supremeMarketAnalysis.isRanging = true;
    supremeMarketAnalysis.isBreakout = false;
    supremeMarketAnalysis.isReversal = false;
    supremeMarketAnalysis.isConsolidation = false;
    supremeMarketAnalysis.activeSession = "NONE";
    supremeMarketAnalysis.isNewsTime = false;
    supremeMarketAnalysis.isLondonOpen = false;
    supremeMarketAnalysis.isNewYorkOpen = false;
    supremeMarketAnalysis.isTokyoOpen = false;
    supremeMarketAnalysis.isOverlapTime = false;
    supremeMarketAnalysis.analysisTime = TimeCurrent();
    supremeMarketAnalysis.lastUpdateTime = TimeCurrent();
    supremeMarketAnalysis.isAnalysisValid = true;
    supremeMarketAnalysis.analysisAccuracy = 0.0;
    supremeMarketAnalysis.predictionReliability = 0.0;
    supremeMarketAnalysis.signalCount = 0;
    supremeMarketAnalysis.confirmationCount = 0;
    supremeMarketAnalysis.divergenceCount = 0;
    supremeMarketAnalysis.convergenceCount = 0;
    supremeMarketAnalysis.isOptimalEntry = false;
    supremeMarketAnalysis.isOptimalExit = false;
    supremeMarketAnalysis.isRiskManagementGood = false;
    supremeMarketAnalysis.isRewardPotentialHigh = false;
    supremeMarketAnalysis.marketPhase = "NEUTRAL";
    supremeMarketAnalysis.cyclePosition = "MIDDLE";
}

//+------------------------------------------------------------------+
//| Initialize Supreme Trading Sessions                              |
//+------------------------------------------------------------------+
void InitializeSupremeTradingSessions()
{
    // Tokyo Session
    supremeSessions[0].name = "TOKYO";
    supremeSessions[0].startHour = 0;
    supremeSessions[0].endHour = 9;
    supremeSessions[0].isEnabled = true;
    supremeSessions[0].isOptimal = false;
    supremeSessions[0].characteristics = "Low volatility, range-bound";
    supremeSessions[0].finalLvl = 1.0;
    
    // London Session
    supremeSessions[1].name = "LONDON";
    supremeSessions[1].startHour = 8;
    supremeSessions[1].endHour = 17;
    supremeSessions[1].isEnabled = true;
    supremeSessions[1].isOptimal = true;
    supremeSessions[1].characteristics = "High volatility, trending";
    supremeSessions[1].finalLvl = 1.0;
    
    // New York Session
    supremeSessions[2].name = "NEW_YORK";
    supremeSessions[2].startHour = 13;
    supremeSessions[2].endHour = 22;
    supremeSessions[2].isEnabled = true;
    supremeSessions[2].isOptimal = true;
    supremeSessions[2].characteristics = "High volatility, news-driven";
    supremeSessions[2].finalLvl = 1.0;
    
    // Overlap Session
    supremeSessions[3].name = "OVERLAP";
    supremeSessions[3].startHour = 13;
    supremeSessions[3].endHour = 17;
    supremeSessions[3].isEnabled = true;
    supremeSessions[3].isOptimal = true;
    supremeSessions[3].characteristics = "Highest volatility, breakouts";
    supremeSessions[3].finalLvl = 1.0;
}

//+------------------------------------------------------------------+
//| Validate Supreme Inputs                                          |
//+------------------------------------------------------------------+
bool ValidateSupremeInputs()
{
    if (MaxRiskPercent <= 0 || MaxRiskPercent > 50) {
        Print("❌ Invalid MaxRiskPercent: ", MaxRiskPercent);
        return false;
    }
    
    if (MaxDailyTrades <= 0 || MaxDailyTrades > 100) {
        Print("❌ Invalid MaxDailyTrades: ", MaxDailyTrades);
        return false;
    }
    
    if (MinConfidence < 0 || MinConfidence > 1) {
        Print("❌ Invalid MinConfidence: ", MinConfidence);
        return false;
    }
    
    if (MinLotSize <= 0 || MaxLotSize <= 0 || MinLotSize > MaxLotSize) {
        Print("❌ Invalid lot size settings");
        return false;
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| Perform Supreme Market Analysis                                  |
//+------------------------------------------------------------------+
void PerformSupremeMarketAnalysis()
{
    // Get current market data
    if (!symbolInfo.RefreshRates()) {
        Print("⚠️ Failed to refresh rates");
        return;
    }
    
    supremeMarketAnalysis.currentPrice = symbolInfo.Bid();
    supremeMarketAnalysis.spread = (symbolInfo.Ask() - symbolInfo.Bid()) / symbolInfo.Point();
    
    // Calculate technical indicators
    CalculateSupremeTechnicalIndicators();
    
    // Determine market conditions
    DetermineSupremeMarketConditions();
    
    // Update session information
    UpdateSupremeSessionInfo();
    
    // Calculate market sentiment
    CalculateSupremeMarketSentiment();
    
    // Update analysis timestamp
    supremeMarketAnalysis.lastUpdateTime = TimeCurrent();
    supremeMarketAnalysis.isAnalysisValid = true;
}

//+------------------------------------------------------------------+
//| Calculate Supreme Technical Indicators                           |
//+------------------------------------------------------------------+
void CalculateSupremeTechnicalIndicators()
{
    // Calculate ATR
    double atr_array[];
    int atr_handle = iATR(_Symbol, PERIOD_CURRENT, ATRPeriod);
    if (CopyBuffer(atr_handle, 0, 0, 1, atr_array) > 0) {
        supremeMarketAnalysis.atr = atr_array[0];
    }
    
    // Calculate RSI
    double rsi_array[];
    int rsi_handle = iRSI(_Symbol, PERIOD_CURRENT, RSIPeriod, PRICE_CLOSE);
    if (CopyBuffer(rsi_handle, 0, 0, 1, rsi_array) > 0) {
        supremeMarketAnalysis.rsi = rsi_array[0];
    }
    
    // Calculate MACD
    double macd_main[], macd_signal[];
    int macd_handle = iMACD(_Symbol, PERIOD_CURRENT, MACDFast, MACDSlow, MACDSignal, PRICE_CLOSE);
    if (CopyBuffer(macd_handle, 0, 0, 1, macd_main) > 0 && CopyBuffer(macd_handle, 1, 0, 1, macd_signal) > 0) {
        supremeMarketAnalysis.macd = macd_main[0];
        supremeMarketAnalysis.macdSignal = macd_signal[0];
        supremeMarketAnalysis.macdHistogram = macd_main[0] - macd_signal[0];
    }
    
    // Calculate Bollinger Bands
    double bb_upper[], bb_lower[], bb_middle[];
    int bb_handle = iBands(_Symbol, PERIOD_CURRENT, BBPeriod, 0, BBDeviation, PRICE_CLOSE);
    if (CopyBuffer(bb_handle, 0, 0, 1, bb_middle) > 0 && 
       CopyBuffer(bb_handle, 1, 0, 1, bb_upper) > 0 && 
       CopyBuffer(bb_handle, 2, 0, 1, bb_lower) > 0) {
        supremeMarketAnalysis.bbMiddle = bb_middle[0];
        supremeMarketAnalysis.bbUpper = bb_upper[0];
        supremeMarketAnalysis.bbLower = bb_lower[0];
    }
    
    // Calculate Stochastic
    double stoch_main[], stoch_signal[];
    int stoch_handle = iStochastic(_Symbol, PERIOD_CURRENT, StochK, StochD, StochSlowing, MODE_SMA, STO_LOWHIGH);
    if (CopyBuffer(stoch_handle, 0, 0, 1, stoch_main) > 0 && CopyBuffer(stoch_handle, 1, 0, 1, stoch_signal) > 0) {
        supremeMarketAnalysis.stochK = stoch_main[0];
        supremeMarketAnalysis.stochD = stoch_signal[0];
    }
    
    // Calculate volatility
    supremeMarketAnalysis.volatility = (supremeMarketAnalysis.atr / supremeMarketAnalysis.currentPrice) * 100;
    
    // Calculate momentum
    double close_array[];
    if (CopyClose(_Symbol, PERIOD_CURRENT, 0, 10, close_array) > 0) {
        supremeMarketAnalysis.momentum = (close_array[9] - close_array[0]) / close_array[0] * 100;
    }
}

//+------------------------------------------------------------------+
//| Determine Supreme Market Conditions                              |
//+------------------------------------------------------------------+
void DetermineSupremeMarketConditions()
{
    // Determine trend direction
    if (supremeMarketAnalysis.currentPrice > supremeMarketAnalysis.bbMiddle && 
        supremeMarketAnalysis.macd > supremeMarketAnalysis.macdSignal && 
        supremeMarketAnalysis.rsi > 50) {
        supremeMarketAnalysis.marketTrend = "BULLISH";
        supremeMarketAnalysis.isTrendingUp = true;
        supremeMarketAnalysis.isTrendingDown = false;
    } else if (supremeMarketAnalysis.currentPrice < supremeMarketAnalysis.bbMiddle && 
               supremeMarketAnalysis.macd < supremeMarketAnalysis.macdSignal && 
               supremeMarketAnalysis.rsi < 50) {
        supremeMarketAnalysis.marketTrend = "BEARISH";
        supremeMarketAnalysis.isTrendingUp = false;
        supremeMarketAnalysis.isTrendingDown = true;
    } else {
        supremeMarketAnalysis.marketTrend = "NEUTRAL";
        supremeMarketAnalysis.isTrendingUp = false;
        supremeMarketAnalysis.isTrendingDown = false;
    }
    
    // Determine market structure
    if (supremeMarketAnalysis.volatility > 0.5) {
        supremeMarketAnalysis.marketStructure = "VOLATILE";
        supremeMarketAnalysis.isHighVolatility = true;
    } else if (supremeMarketAnalysis.volatility < 0.2) {
        supremeMarketAnalysis.marketStructure = "RANGING";
        supremeMarketAnalysis.isRanging = true;
    } else {
        supremeMarketAnalysis.marketStructure = "TRENDING";
    }
    
    // Check for breakout conditions
    if (supremeMarketAnalysis.currentPrice > supremeMarketAnalysis.bbUpper || 
        supremeMarketAnalysis.currentPrice < supremeMarketAnalysis.bbLower) {
        supremeMarketAnalysis.isBreakout = true;
    }
    
    // Check for reversal conditions
    if ((supremeMarketAnalysis.rsi > 70 && supremeMarketAnalysis.stochK > 80) || 
        (supremeMarketAnalysis.rsi < 30 && supremeMarketAnalysis.stochK < 20)) {
        supremeMarketAnalysis.isReversal = true;
    }
    
    // Check liquidity
    supremeMarketAnalysis.isLiquidityHigh = (supremeMarketAnalysis.spread <= MaxSpreadPoints);
}

//+------------------------------------------------------------------+
//| Update Supreme Session Info                                      |
//+------------------------------------------------------------------+
void UpdateSupremeSessionInfo()
{
    MqlDateTime dt;
    TimeToStruct(TimeCurrent(), dt);
    int currentHour = dt.hour;
    
    // Update session status
    for (int i = 0; i < 4; i++) {
        bool wasActive = supremeSessions[i].isActive;
        supremeSessions[i].isActive = supremeSessions[i].isEnabled && 
                                    (currentHour >= supremeSessions[i].startHour && 
                                     currentHour < supremeSessions[i].endHour);
        
        if (supremeSessions[i].isActive && !wasActive) {
            string message = StringFormat("🌅 %s SESSION STARTED - READY TO DOMINATE!", supremeSessions[i].name);
            Print(message);
            if (EnablePushNotifications) {
                SendNotification(message);
            }
        }
    }
    
    // Set active session
    supremeMarketAnalysis.activeSession = "NONE";
    for (int i = 0; i < 4; i++) {
        if (supremeSessions[i].isActive) {
            supremeMarketAnalysis.activeSession = supremeSessions[i].name;
            break;
        }
    }
    
    // Update session-specific flags
    supremeMarketAnalysis.isLondonOpen = supremeSessions[1].isActive;
    supremeMarketAnalysis.isNewYorkOpen = supremeSessions[2].isActive;
    supremeMarketAnalysis.isTokyoOpen = supremeSessions[0].isActive;
    supremeMarketAnalysis.isOverlapTime = supremeSessions[3].isActive;
}

//+------------------------------------------------------------------+
//| Calculate Supreme Market Sentiment                               |
//+------------------------------------------------------------------+
void CalculateSupremeMarketSentiment()
{
    double bullishSignals = 0;
    double bearishSignals = 0;
    double totalSignals = 0;
    
    // RSI sentiment
    if (supremeMarketAnalysis.rsi > 70) bearishSignals++;
    else if (supremeMarketAnalysis.rsi < 30) bullishSignals++;
    totalSignals++;
    
    // MACD sentiment
    if (supremeMarketAnalysis.macd > supremeMarketAnalysis.macdSignal) bullishSignals++;
    else bearishSignals++;
    totalSignals++;
    
    // Bollinger Bands sentiment
    if (supremeMarketAnalysis.currentPrice > supremeMarketAnalysis.bbUpper) bearishSignals++;
    else if (supremeMarketAnalysis.currentPrice < supremeMarketAnalysis.bbLower) bullishSignals++;
    totalSignals++;
    
    // Stochastic sentiment
    if (supremeMarketAnalysis.stochK > 80) bearishSignals++;
    else if (supremeMarketAnalysis.stochK < 20) bullishSignals++;
    totalSignals++;
    
    // Calculate overall sentiment
    if (totalSignals > 0) {
        supremeMarketAnalysis.marketSentiment = (bullishSignals - bearishSignals) / totalSignals;
    } else {
        supremeMarketAnalysis.marketSentiment = 0.0;
    }
}

//+------------------------------------------------------------------+
//| Check for Supreme Signals                                        |
//+------------------------------------------------------------------+
void CheckForSupremeSignals()
{
    if (!EnableAutoTrading) return;
    
    // Check limits
    if (supremeStats.todayTrades >= MaxDailyTrades) {
        static datetime lastLimitWarning = 0;
        if (TimeCurrent() - lastLimitWarning >= 3600) {
            Print("⚠️ Daily trade limit reached: ", MaxDailyTrades);
            lastLimitWarning = TimeCurrent();
        }
        return;
    }
    
    if (supremeStats.todayRisk >= MaxDailyRisk) {
        static datetime lastRiskWarning = 0;
        if (TimeCurrent() - lastRiskWarning >= 3600) {
            Print("⚠️ Daily risk limit reached: ", MaxDailyRisk, "%");
            lastRiskWarning = TimeCurrent();
        }
        return;
    }
    
    // Check minimum time between trades
    if (TimeCurrent() - supremeStats.lastTradeTime < MinTimeBetweenTrades) {
        return;
    }
    
    // Check if we already have a position
    if (positionInfo.Select(_Symbol)) {
        return;
    }
    
    // Generate supreme signal
    SupremeGoldexSignal signal = GenerateSupremeSignal();
    
    if (signal.isValid && signal.passedAllFilters) {
        ProcessSupremeSignal(signal);
    }
}

//+------------------------------------------------------------------+
//| Generate Supreme Signal                                           |
//+------------------------------------------------------------------+
SupremeGoldexSignal GenerateSupremeSignal()
{
    SupremeGoldexSignal signal;
    signal.isValid = false;
    signal.passedAllFilters = false;
    
    // Check if conditions are optimal for trading
    if (!IsSupremeOptimalCondition()) {
        return signal;
    }
    
    // Determine signal direction
    string direction = DetermineSupremeSignalDirection();
    if (direction == "NONE") {
        return signal;
    }
    
    // Generate signal details
    signal.id = StringFormat("SUPREME_%d_%d", (int)TimeCurrent(), MathRand());
    signal.direction = direction;
    signal.entryPrice = (direction == "long") ? symbolInfo.Ask() : symbolInfo.Bid();
    signal.timestamp = TimeCurrent();
    signal.sessionName = supremeMarketAnalysis.activeSession;
    
    // Copy market analysis data
    signal.atr = supremeMarketAnalysis.atr;
    signal.rsi = supremeMarketAnalysis.rsi;
    signal.macd = supremeMarketAnalysis.macd;
    signal.macdSignal = supremeMarketAnalysis.macdSignal;
    signal.macdHistogram = supremeMarketAnalysis.macdHistogram;
    signal.bbUpper = supremeMarketAnalysis.bbUpper;
    signal.bbLower = supremeMarketAnalysis.bbLower;
    signal.bbMiddle = supremeMarketAnalysis.bbMiddle;
    signal.stochK = supremeMarketAnalysis.stochK;
    signal.stochD = supremeMarketAnalysis.stochD;
    signal.volatility = supremeMarketAnalysis.volatility;
    signal.spread = supremeMarketAnalysis.spread;
    signal.momentum = supremeMarketAnalysis.momentum;
    signal.marketStructure = supremeMarketAnalysis.marketStructure;
    
    // Determine signal mode
    signal.mode = DetermineSupremeSignalMode();
    
    // Calculate dynamic stop loss and take profit
    CalculateSupremeDynamicLevels(signal);
    
    // Calculate optimal lot size
    signal.lotSize = CalculateSupremeOptimalLotSize(signal);
    
    // Calculate signal quality and confidence
    signal.qualityScore = CalculateSupremeSignalQuality(signal);
    signal.confidence = CalculateSupremeConfidence(signal);
    
    // Generate reasoning
    signal.reasoning = GenerateSupremeReasoning(signal);
    
    // Final validation
    if (signal.confidence >= MinConfidence && 
        signal.qualityScore >= 0.7 && 
        ValidateSupremeSignal(signal)) {
        signal.isValid = true;
        signal.passedAllFilters = true;
    }
    
    return signal;
}

//+------------------------------------------------------------------+
//| Check Supreme Optimal Conditions                                 |
//+------------------------------------------------------------------+
bool IsSupremeOptimalCondition()
{
    // Always trade in Supreme Mode unless specifically disabled
    if (!EnableSupremeMode) {
        return false;
    }
    
    // Check spread
    if (supremeMarketAnalysis.spread > MaxSpreadPoints) {
        return false;
    }
    
    // If trading all sessions, always return true
    if (TradeAllSessions) {
        return true;
    }
    
    // Check session filter if enabled
    if (EnableSessionFilter) {
        bool sessionActive = false;
        for (int i = 0; i < 4; i++) {
            if (supremeSessions[i].isActive && supremeSessions[i].isOptimal) {
                sessionActive = true;
                break;
            }
        }
        if (!sessionActive) {
            return false;
        }
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| Determine Supreme Signal Direction                                |
//+------------------------------------------------------------------+
string DetermineSupremeSignalDirection()
{
    int bullishSignals = 0;
    int bearishSignals = 0;
    int totalSignals = 0;
    
    // RSI signals
    if (supremeMarketAnalysis.rsi < 35) {
        bullishSignals++;
    } else if (supremeMarketAnalysis.rsi > 65) {
        bearishSignals++;
    }
    totalSignals++;
    
    // MACD signals
    if (supremeMarketAnalysis.macd > supremeMarketAnalysis.macdSignal && 
        supremeMarketAnalysis.macdHistogram > 0) {
        bullishSignals++;
    } else if (supremeMarketAnalysis.macd < supremeMarketAnalysis.macdSignal && 
               supremeMarketAnalysis.macdHistogram < 0) {
        bearishSignals++;
    }
    totalSignals++;
    
    // Bollinger Bands signals
    if (supremeMarketAnalysis.currentPrice < supremeMarketAnalysis.bbLower) {
        bullishSignals++;
    } else if (supremeMarketAnalysis.currentPrice > supremeMarketAnalysis.bbUpper) {
        bearishSignals++;
    }
    totalSignals++;
    
    // Stochastic signals
    if (supremeMarketAnalysis.stochK < 25 && supremeMarketAnalysis.stochD < 25) {
        bullishSignals++;
    } else if (supremeMarketAnalysis.stochK > 75 && supremeMarketAnalysis.stochD > 75) {
        bearishSignals++;
    }
    totalSignals++;
    
    // Momentum signals
    if (supremeMarketAnalysis.momentum > 0.1) {
        bullishSignals++;
    } else if (supremeMarketAnalysis.momentum < -0.1) {
        bearishSignals++;
    }
    totalSignals++;
    
    // Market sentiment
    if (supremeMarketAnalysis.marketSentiment > 0.2) {
        bullishSignals++;
    } else if (supremeMarketAnalysis.marketSentiment < -0.2) {
        bearishSignals++;
    }
    totalSignals++;
    
    // In Supreme Mode, require at least 60% confirmation
    double bullishPercent = (double)bullishSignals / totalSignals;
    double bearishPercent = (double)bearishSignals / totalSignals;
    
    if (bullishPercent >= 0.6 && bullishPercent > bearishPercent) {
        return "long";
    } else if (bearishPercent >= 0.6 && bearishPercent > bullishPercent) {
        return "short";
    }
    
    return "NONE";
}

//+------------------------------------------------------------------+
//| Determine Supreme Signal Mode                                     |
//+------------------------------------------------------------------+
string DetermineSupremeSignalMode()
{
    if (supremeMarketAnalysis.isBreakout && EnableBreakoutMode) {
        return "breakout";
    } else if (supremeMarketAnalysis.isNewsTime && EnableNewsTrading) {
        return "news";
    } else if (supremeStats.isRecoveryMode && EnableMartingaleMode) {
        return "recovery";
    } else if (supremeMarketAnalysis.volatility > 0.5 && EnableScalpingMode) {
        return "scalp";
    } else if (EnableSwingMode) {
        return "swing";
    } else if (EnableHyperMode) {
        return "hyper";
    }
    
    return "supreme";
}

//+------------------------------------------------------------------+
//| Calculate Supreme Dynamic Levels                                 |
//+------------------------------------------------------------------+
void CalculateSupremeDynamicLevels(SupremeGoldexSignal &signal)
{
    double atrDistance = signal.atr * ATRMultiplier;
    double baseRR = BaseRiskRewardRatio;
    
    // Adjust based on market conditions
    if (supremeMarketAnalysis.isHighVolatility) {
        baseRR *= SupremeRRMultiplier;
    }
    
    if (supremeMarketAnalysis.isBreakout) {
        baseRR *= 1.5; // Higher reward for breakouts
    }
    
    if (signal.mode == "scalp") {
        atrDistance *= 0.8; // Tighter stops for scalping
        baseRR *= 0.7; // Lower RR for scalping
    } else if (signal.mode == "swing") {
        atrDistance *= 1.2; // Wider stops for swings
        baseRR *= 1.3; // Higher RR for swings
    } else if (signal.mode == "breakout") {
        atrDistance *= 1.5; // Much wider stops for breakouts
        baseRR *= 2.0; // Much higher RR for breakouts
    }
    
    // Calculate levels
    if (signal.direction == "long") {
        signal.stopLoss = signal.entryPrice - atrDistance;
        signal.takeProfit = signal.entryPrice + (atrDistance * baseRR);
    } else {
        signal.stopLoss = signal.entryPrice + atrDistance;
        signal.takeProfit = signal.entryPrice - (atrDistance * baseRR);
    }
    
    signal.riskReward = baseRR;
    signal.riskAmount = MathAbs(signal.entryPrice - signal.stopLoss);
    signal.rewardAmount = MathAbs(signal.takeProfit - signal.entryPrice);
    signal.estimatedProfit = signal.rewardAmount * signal.lotSize * symbolInfo.TickValue() / symbolInfo.TickSize();
}

//+------------------------------------------------------------------+
//| Calculate Supreme Optimal Lot Size                               |
//+------------------------------------------------------------------+
double CalculateSupremeOptimalLotSize(SupremeGoldexSignal &signal)
{
    double accountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    double riskPercent = MaxRiskPercent;
    
    // Adjust risk based on recovery mode
    if (supremeStats.isRecoveryMode && EnableMartingaleMode) {
        riskPercent = MaxRiskPercent * MathPow(MartingaleMultiplier, supremeStats.martingaleLevel);
        riskPercent = MathMin(riskPercent, MaxDailyRisk * 0.5); // Cap at half daily risk
    }
    
    // Reduce risk after consecutive losses
    if (supremeStats.consecutiveLosses >= 3) {
        riskPercent *= 0.5;
    } else if (supremeStats.consecutiveLosses >= 2) {
        riskPercent *= 0.7;
    }
    
    // Increase risk after consecutive wins (but cap it)
    if (supremeStats.consecutiveWins >= 3) {
        riskPercent *= 1.2;
    } else if (supremeStats.consecutiveWins >= 2) {
        riskPercent *= 1.1;
    }
    
    // Calculate risk amount
    double riskAmount = accountBalance * (riskPercent / 100.0);
    
    // Calculate lot size
    double stopLossPoints = MathAbs(signal.entryPrice - signal.stopLoss) / symbolInfo.Point();
    double tickValue = symbolInfo.TickValue();
    
    double lotSize = riskAmount / (stopLossPoints * tickValue);
    
    // Apply limits
    lotSize = MathMax(lotSize, MinLotSize);
    lotSize = MathMin(lotSize, MaxLotSize);
    
    // Round to valid lot size
    double lotStep = symbolInfo.LotsStep();
    if (lotStep > 0) {
        lotSize = MathRound(lotSize / lotStep) * lotStep;
    }
    
    return lotSize;
}

//+------------------------------------------------------------------+
//| Calculate Supreme Signal Quality                                  |
//+------------------------------------------------------------------+
double CalculateSupremeSignalQuality(SupremeGoldexSignal &signal)
{
    double quality = 0.0;
    
    // RSI quality
    if (signal.direction == "long" && signal.rsi < 40) {
        quality += 0.15;
    } else if (signal.direction == "short" && signal.rsi > 60) {
        quality += 0.15;
    }
    
    // MACD quality
    if (signal.direction == "long" && signal.macd > signal.macdSignal) {
        quality += 0.15;
    } else if (signal.direction == "short" && signal.macd < signal.macdSignal) {
        quality += 0.15;
    }
    
    // Bollinger Bands quality
    if (signal.direction == "long" && signal.entryPrice < signal.bbLower) {
        quality += 0.2;
    } else if (signal.direction == "short" && signal.entryPrice > signal.bbUpper) {
        quality += 0.2;
    }
    
    // Stochastic quality
    if (signal.direction == "long" && signal.stochK < 30) {
        quality += 0.1;
    } else if (signal.direction == "short" && signal.stochK > 70) {
        quality += 0.1;
    }
    
    // Volatility quality
    if (signal.volatility > 0.3 && signal.volatility < 1.0) {
        quality += 0.1;
    }
    
    // Spread quality
    if (signal.spread <= MaxSpreadPoints * 0.6) {
        quality += 0.1;
    }
    
    // Session quality
    if (signal.sessionName == "LONDON" || signal.sessionName == "NEW_YORK" || signal.sessionName == "OVERLAP") {
        quality += 0.1;
    }
    
    // Risk-reward quality
    if (signal.riskReward >= 2.0) {
        quality += 0.1;
    }
    
    return MathMin(quality, 1.0);
}

//+------------------------------------------------------------------+
//| Calculate Supreme Confidence                                      |
//+------------------------------------------------------------------+
double CalculateSupremeConfidence(SupremeGoldexSignal &signal)
{
    double confidence = 0.6; // Base confidence
    
    // Add confidence based on quality
    confidence += signal.qualityScore * 0.2;
    
    // Add confidence based on market conditions
    if (supremeMarketAnalysis.isHighVolatility) {
        confidence += 0.05;
    }
    
    if (supremeMarketAnalysis.isLiquidityHigh) {
        confidence += 0.05;
    }
    
    if (supremeMarketAnalysis.isBreakout) {
        confidence += 0.1;
    }
    
    // Add confidence based on session
    if (signal.sessionName == "OVERLAP") {
        confidence += 0.1;
    } else if (signal.sessionName == "LONDON" || signal.sessionName == "NEW_YORK") {
        confidence += 0.05;
    }
    
    // Adjust based on recent performance
    if (supremeStats.consecutiveWins >= 3) {
        confidence += 0.05;
    } else if (supremeStats.consecutiveLosses >= 2) {
        confidence -= 0.1;
    }
    
    // Add confidence based on risk-reward
    if (signal.riskReward >= 3.0) {
        confidence += 0.05;
    }
    
    return MathMin(confidence, 0.98);
}

//+------------------------------------------------------------------+
//| Generate Supreme Reasoning                                        |
//+------------------------------------------------------------------+
string GenerateSupremeReasoning(SupremeGoldexSignal &signal)
{
    string reasoning = StringFormat("🔥 SUPREME %s %s Signal: ", signal.mode, signal.direction);
    reasoning += StringFormat("RSI=%.1f, MACD=%.4f, ", signal.rsi, signal.macd);
    reasoning += StringFormat("Stoch=%.1f, Vol=%.1f%%, ", signal.stochK, signal.volatility);
    reasoning += StringFormat("RR=%.1f:1, Quality=%.0f%%, ", signal.riskReward, signal.qualityScore * 100);
    reasoning += StringFormat("Session=%s, Structure=%s, ", signal.sessionName, signal.marketStructure);
    reasoning += StringFormat("Spread=%.1f, Momentum=%.2f", signal.spread, signal.momentum);
    
    return reasoning;
}

//+------------------------------------------------------------------+
//| Validate Supreme Signal                                           |
//+------------------------------------------------------------------+
bool ValidateSupremeSignal(SupremeGoldexSignal &signal)
{
    // Check basic signal structure
    if (signal.id == "" || signal.direction == "" || signal.entryPrice <= 0) {
        return false;
    }
    
    // Check stop loss and take profit
    if (signal.stopLoss <= 0 || signal.takeProfit <= 0) {
        return false;
    }
    
    // Check lot size
    if (signal.lotSize < MinLotSize || signal.lotSize > MaxLotSize) {
        return false;
    }
    
    // Check signal age
    if (TimeCurrent() - signal.timestamp > 120) { // 2 minutes max
        return false;
    }
    
    // Check direction consistency
    if (signal.direction == "long" && signal.stopLoss >= signal.entryPrice) {
        return false;
    }
    
    if (signal.direction == "short" && signal.stopLoss <= signal.entryPrice) {
        return false;
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| Process Supreme Signal                                            |
//+------------------------------------------------------------------+
void ProcessSupremeSignal(SupremeGoldexSignal &signal)
{
    // Final validation
    if (!ValidateSupremeSignal(signal)) {
        Print("❌ Signal validation failed: ", signal.id);
        return;
    }
    
    // Execute trade
    bool success = ExecuteSupremeTrade(signal);
    
    if (success) {
        // Update statistics
        supremeStats.todayTrades++;
        supremeStats.totalTrades++;
        double tradeRisk = CalculateSupremeTradeRisk(signal);
        supremeStats.todayRisk += tradeRisk;
        supremeStats.lastTradeTime = TimeCurrent();
        
        // Update mode-specific counters
        if (signal.mode == "scalp") {
            supremeStats.scalpsCompleted++;
        } else if (signal.mode == "swing") {
            supremeStats.swingsCompleted++;
        } else if (signal.mode == "breakout") {
            supremeStats.breakoutsCompleted++;
        } else if (signal.mode == "news") {
            supremeStats.newsTradesCompleted++;
        }
        
        // Notification
        string message = StringFormat("🔥 SUPREME TRADE EXECUTED!\n" +
                                    "═════════════════════════\n" +
                                    "Direction: %s %s\n" +
                                    "Entry: %.2f\n" +
                                    "Stop Loss: %.2f\n" +
                                    "Take Profit: %.2f\n" +
                                    "Lot Size: %.2f\n" +
                                    "Risk/Reward: %.1f:1\n" +
                                    "Confidence: %.0f%%\n" +
                                    "Quality: %.0f%%\n" +
                                    "Mode: %s\n" +
                                    "Session: %s\n" +
                                    "Expected Profit: $%.2f\n" +
                                    "═════════════════════════\n" +
                                    "🎯 TARGET: $1K → $100K!",
                                    signal.direction.ToUpper(), _Symbol,
                                    signal.entryPrice,
                                    signal.stopLoss,
                                    signal.takeProfit,
                                    signal.lotSize,
                                    signal.riskReward,
                                    signal.confidence * 100,
                                    signal.qualityScore * 100,
                                    signal.mode.ToUpper(),
                                    signal.sessionName,
                                    signal.estimatedProfit);
        
        Print(message);
        
        if (EnablePushNotifications) {
            SendNotification(message);
        }
        
        if (EnableSoundAlerts) {
            PlaySound("alert.wav");
        }
        
        // Log signal details
        LogSupremeSignal(signal);
    }
    else {
        Print("❌ Trade execution failed for signal: ", signal.id);
        
        if (EnablePushNotifications) {
            SendNotification("❌ SUPREME TRADE EXECUTION FAILED - Check EA logs");
        }
    }
}

//+------------------------------------------------------------------+
//| Execute Supreme Trade                                             |
//+------------------------------------------------------------------+
bool ExecuteSupremeTrade(SupremeGoldexSignal &signal)
{
    // Execute the trade
    bool result = false;
    
    if (signal.direction == "long") {
        result = trade.Buy(signal.lotSize, _Symbol, signal.entryPrice, signal.stopLoss, signal.takeProfit, TradeComment);
    } else {
        result = trade.Sell(signal.lotSize, _Symbol, signal.entryPrice, signal.stopLoss, signal.takeProfit, TradeComment);
    }
    
    if (!result) {
        Print("❌ Trade failed: ", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
        return false;
    }
    
    // Get trade result
    ulong ticket = trade.ResultOrder();
    double executionPrice = trade.ResultPrice();
    
    Print("✅ SUPREME TRADE EXECUTED:");
    Print("   Ticket: ", ticket);
    Print("   Price: ", executionPrice);
    Print("   Volume: ", signal.lotSize);
    Print("   Stop Loss: ", signal.stopLoss);
    Print("   Take Profit: ", signal.takeProfit);
    Print("   Mode: ", signal.mode);
    Print("   Session: ", signal.sessionName);
    Print("   Confidence: ", signal.confidence * 100, "%");
    Print("   Quality: ", signal.qualityScore * 100, "%");
    
    return true;
}

//+------------------------------------------------------------------+
//| Calculate Supreme Trade Risk                                      |
//+------------------------------------------------------------------+
double CalculateSupremeTradeRisk(SupremeGoldexSignal &signal)
{
    double stopLossPoints = MathAbs(signal.entryPrice - signal.stopLoss);
    double riskAmount = (stopLossPoints / signal.entryPrice) * 100.0;
    return MathMin(riskAmount, MaxRiskPercent);
}

//+------------------------------------------------------------------+
//| Log Supreme Signal                                                |
//+------------------------------------------------------------------+
void LogSupremeSignal(SupremeGoldexSignal &signal)
{
    string logMessage = StringFormat("🔥 SUPREME SIGNAL LOG:\n" +
                                   "═══════════════════════════════════════\n" +
                                   "ID: %s\n" +
                                   "Mode: %s | Direction: %s\n" +
                                   "Entry: %.2f | SL: %.2f | TP: %.2f\n" +
                                   "Lot Size: %.2f | RR: %.1f:1\n" +
                                   "Confidence: %.0f%% | Quality: %.0f%%\n" +
                                   "ATR: %.2f | RSI: %.1f | MACD: %.4